{
  "README.html": {
    "href": "README.html",
    "title": "Old Documentation: | PDMShell",
    "keywords": "Old Documentation: https://bluebyte.biz/docs/pdm2excel/ https://bluebyte.biz/docs/pdm-convert-task-extended/ https://bluebyte.biz/docs/revisionsync/ Build To build the docs: Clone repo cd to repo folder type bin\\docfx.exe docfx.json --serve and press enter go to http://localhost:8080 in your browser to view Ctrl + C to end the webserver git add . git commit -m \"added docs\" git push Live site Commits will take roughly a few minutes to render on github pages. See live site here. Edits Make changes to the src folder. It contains the toc.yml (Table of Content) and the articles in markdown (.md files) Images Add images to the images folder and use <img src=\"../images/myimage.png\"/> to render them. Links See how links work in introduction.md. Tool Use VSCode."
  },
  "index.html": {
    "href": "index.html",
    "title": "PDMShell | PDMShell",
    "keywords": "PDMShell Welcome to the PDMShell Help Center. Here, you will find the official documentation for PDMShell, a command-line interpreter designed to streamline and automate tasks within SOLIDWORKS PDM Professional. We also provide helpful articles on PDM best practices and tooling. Before submitting a support ticket, we highly recommend reviewing the documentation and troubleshooting guides available on this site. Getting Started Click on Help Center to get started. Contact Us For more information or to get in touch with our support team, please refer to the Contact Us page."
  },
  "src/CD.html": {
    "href": "src/CD.html",
    "title": "CD Command Documentation | PDMShell",
    "keywords": "CD Command Documentation DESCRIPTION: Displays the name of, or changes, the current PDM directory. SYNTAX: cd [-d directory] [-clipboardcd] PARAMETERS: -d directory - The directory to switch to. The directory parameter can be a relative or absolute path in PDM. -clipboardcd - Copies the path to your clipboard after switching to that directory. EXAMPLES: cd -d 'C:\\Vault\\NewFolder' cd -clipboardcd REMARKS: If the user just creates a new folder and wants to cd to it using autocomplete, they need to use the dir command with the -refresh parameter to force the session to load the current files and sub-folders in the active directory. Do not use this when the current folder has many items."
  },
  "src/CHECKIN.html": {
    "href": "src/CHECKIN.html",
    "title": "CHECKIN Command Documentation | PDMShell",
    "keywords": "CHECKIN Command Documentation DESCRIPTION: Check-in the specified file or files using a search operation. SYNTAX: checkin [-s search] [-b batch] [-f filePath] [-cmt comment] [-ciopt Checkinoptions] PARAMETERS: -s search - The search operation to use. -b batch - Forces PDM to use the BatchUtility in PDM to process a large number of files. -f filePath - The file(s) to be checked in. This is the default parameter. -cmt comment - The comment to add to the check-in. -ciopt Checkinoptions - The check-in options to use. EXAMPLES: checkin -f \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. If combining Checkinoptions parameters, the user needs to add + between the values. Checkinoptions Parameter Values: Member Description EdmUnlock_FailOnRegenerationNeed Fail if the file needs to be regenerated in the CAD program. NOTE: Only files resaved in SOLIDWORKS 2009 or later can trigger this flag EdmUnlock_ForceUnlock Unlock the file even if it is not modified EdmUnlock_IgnoreCorruptFile Ignore files with file formats unrecognized by SOLIDWORKS PDM Professional; without this flag, SOLIDWORKS PDM Professional returns E_EDM_INVALID_FILE if it encounters a corrupt file or a file containing a newer format than SOLIDWORKS PDM Professional can handle EdmUnlock_IgnoreReferences Silently unlock parent files without their references EdmUnlock_IgnoreRefsNotLockedByCaller Ignore references not locked by caller EdmUnlock_IgnoreRefsOutsideVault Ignore references to files outside the vault EdmUnlock_KeepLocked Keep the file checked out after creating the new version in the archive EdmUnlock_OverwriteLatestVersion Do not create a new version; overwrite the last version of the file with new changes EdmUnlock_RemoveLocalCopy Remove the local copy of the file from the hard disk after the file has been checked in EdmUnlock_Simple Check in the file using default behavior"
  },
  "src/CHECKOUT.html": {
    "href": "src/CHECKOUT.html",
    "title": "CHECKOUT Command Documentation | PDMShell",
    "keywords": "CHECKOUT Command Documentation DESCRIPTION: Check-out the specified file or files using a search operation. SYNTAX: checkout [-s search] [-f filePath] PARAMETERS: -s search - The search operation to use. -f filePath - The file(s) to be checked out. This is the default parameter. EXAMPLES: checkout -f \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/CLS.html": {
    "href": "src/CLS.html",
    "title": "CLS Command Documentation | PDMShell",
    "keywords": "CLS Command Documentation DESCRIPTION: Clears the screen. SYNTAX: cls PARAMETERS: None EXAMPLES: cls"
  },
  "src/DIR.html": {
    "href": "src/DIR.html",
    "title": "DIR Command Documentation | PDMShell",
    "keywords": "DIR Command Documentation DESCRIPTION: Displays a list of files and subdirectories in a directory. SYNTAX: dir [-d directory] [-sort sort] [-cols columns] [-csv CSV] [-refresh] PARAMETERS: -d directory - The directory to display files from. -sort sort - The sorting order for the displayed files. -cols columns - The columns to display, separated by commas. -csv CSV - Export the directory listing to a CSV file. -refresh - Refresh the session to load the current files and sub-folders in the active directory. EXAMPLES: dir -d \"C:\\Vault\\Documents\" dir -d \"C:\\Vault\\Documents\" -sort \"name\" -cols \"name,size,date\" -csv \"output.csv\" -refresh REMARKS: Use the -refresh parameter to force the session to load the current files and sub-folders in the active directory. Do not use this when the current folder has many items. The CSV file will be checked into the current directory."
  },
  "src/DUMP.html": {
    "href": "src/DUMP.html",
    "title": "DUMP Command Documentation | PDMShell",
    "keywords": "DUMP Command Documentation DESCRIPTION: Dumps all session text into a log file. SYNTAX: dump [-l logfile] PARAMETERS: -l logfile - The log file to dump session details into. EXAMPLES: dump -l \"sessionlog.txt\""
  },
  "src/EDITVARS.html": {
    "href": "src/EDITVARS.html",
    "title": "EDITVARS Command Documentation | PDMShell",
    "keywords": "EDITVARS Command Documentation DESCRIPTION: Shows the variable editor manager. SYNTAX: editvars PARAMETERS: None EXAMPLES: editvars PREVIEW:"
  },
  "src/FROGLEAP.html": {
    "href": "src/FROGLEAP.html",
    "title": "FROGLEAP Command Documentation | PDMShell",
    "keywords": "FROGLEAP Command Documentation DESCRIPTION: Frog leaps an old version as newest. SYNTAX: frogleap [-s search] [-f filePath] [-oldVersion oldVersion] PARAMETERS: -s search - The search operation to use. -f filePath - The file(s) to be frog leaped. This is the default parameter. -oldVersion oldVersion - The old version to leap. This is an integer. EXAMPLES: frogleap -f \"file1.sldprt\" -oldVersion 2 REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/GET.html": {
    "href": "src/GET.html",
    "title": "GET Command Documentation | PDMShell",
    "keywords": "GET Command Documentation DESCRIPTION: Retrieves a specified version of a file or files. SYNTAX: get [-s search] [-f filePath] [-ver version] PARAMETERS: -s search - The search operation to use. -f filePath - The file(s) to retrieve. This is the default parameter. -ver version - The version of the file to retrieve. EXAMPLES: get -f \"file1.sldprt\" -ver 2 REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/GETNAME.html": {
    "href": "src/GETNAME.html",
    "title": "GETNAME Command Documentation | PDMShell",
    "keywords": "GETNAME Command Documentation DESCRIPTION: Returns the name of an object (folder or file) from a PDM ID. SYNTAX: getname [-id object_id] PARAMETERS: -id object_id - The PDM ID of the object. EXAMPLES: getname -id 12345 PREVIEW:"
  },
  "src/GETVAR.html": {
    "href": "src/GETVAR.html",
    "title": "GETVAR Command Documentation | PDMShell",
    "keywords": "GETVAR Command Documentation DESCRIPTION: Gets the value of a variable for a specified file or folder. SYNTAX: getvar [-f filePath] [-var variableName] [-configs configNames] [-clear] [-ver version] PARAMETERS: -f filePath - The file or folder to get the variable from. -var variableName - The variable name to retrieve. -configs configNames - The configuration names to retrieve the variable from, separated by commas. -clear - Clears the variable value. -ver version - The version of the file to retrieve the variable from. EXAMPLES: getvar -f \"file1.sldprt\" -var \"CustomVar\" REMARKS: The configuration names should be separated by commas. The variable must be in the data card."
  },
  "src/GETVARFROMDB.html": {
    "href": "src/GETVARFROMDB.html",
    "title": "GETVARFROMDB Command Documentation | PDMShell",
    "keywords": "GETVARFROMDB Command Documentation DESCRIPTION: Gets the value of a variable for a specified file or folder directly from the database. SYNTAX: getvarfromdb [-f filePath] [-var variableName] [-configs configNames] PARAMETERS: -f filePath - The file or folder to get the variable from. -var variableName - The variable name to retrieve from the database. -configs configNames - The configuration names to retrieve the variable from, separated by commas. EXAMPLES: getvarfromdb -f \"file1.sldprt\" -var \"CustomVar\" REMARKS: The configuration names should be separated by commas."
  },
  "src/HELP.html": {
    "href": "src/HELP.html",
    "title": "HELP Command Documentation | PDMShell",
    "keywords": "HELP Command Documentation DESCRIPTION: Provides help about a command. SYNTAX: help [-c command_name] PARAMETERS: -c command_name - The specific command you need help with. EXAMPLES: help -c cd"
  },
  "src/HISTORY.html": {
    "href": "src/HISTORY.html",
    "title": "HISTORY Command Documentation | PDMShell",
    "keywords": "HISTORY Command Documentation DESCRIPTION: Prints the history of a file. SYNTAX: history [-s search] [-f filePath] PARAMETERS: -s search - The search operation to use. -f filePath - The file to get the history for. EXAMPLES: history -f \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. PREVIEW:"
  },
  "src/INBOX.html": {
    "href": "src/INBOX.html",
    "title": "INBOX Command Documentation | PDMShell",
    "keywords": "INBOX Command Documentation DESCRIPTION: Opens the PDM inbox and sends a message as the logged-in user. SYNTAX: inbox [-m message] PARAMETERS: -m message - The message to send. EXAMPLES: inbox -m 'File checked in successfully'"
  },
  "src/INFOVAR.html": {
    "href": "src/INFOVAR.html",
    "title": "INFOVAR Command Documentation | PDMShell",
    "keywords": "INFOVAR Command Documentation DESCRIPTION: Gets information about a variable. SYNTAX: infovar [-v variable_name] PARAMETERS: -v variable_name - The variable name to retrieve information for. EXAMPLES: infovar -v Description Preview"
  },
  "src/KILL.html": {
    "href": "src/KILL.html",
    "title": "KILL Command Documentation | PDMShell",
    "keywords": "KILL Command Documentation DESCRIPTION: Kills a process. SYNTAX: kill [-p process_name] PARAMETERS: -p process_name - The process to terminate (with extension) EXAMPLES: kill sldworks.exe REMARKS: This command uses taskkill from the command line. It requires PDM to be run as an administrator."
  },
  "src/LOGIN.html": {
    "href": "src/LOGIN.html",
    "title": "LOGIN Command Documentation | PDMShell",
    "keywords": "LOGIN Command Documentation DESCRIPTION: Authenticates a user to a specified vault. SYNTAX: login [-a|-win|-ex] -u username -p password -v vault_name PARAMETERS: Auto -a Automatic authentication with current user. Displays login dialog box if not logged in. win -w Automatic Windows authentication with current user. Does not display login dialog box. External -ex Toggle ensures that a license is consumed. Username -u Username. Password -p Password. vaultName -v Vault Name. EXAMPLES: login -u admin -p \"password\" -v \"bluebyte\""
  },
  "src/MKDIR.html": {
    "href": "src/MKDIR.html",
    "title": "MKDIR Command Documentation | PDMShell",
    "keywords": "MKDIR Command Documentation DESCRIPTION: Creates a new folder. SYNTAX: mkdir [-d directory] PARAMETERS: -d directory - The folder to create. EXAMPLES: mkdir -d \"NewFolder\" Remarks: To get the new folder to show up in the auto-complete, please use the command cd -refresh"
  },
  "src/MKVAR.html": {
    "href": "src/MKVAR.html",
    "title": "MKVAR Command Documentation | PDMShell",
    "keywords": "MKVAR Command Documentation DESCRIPTION: Creates a new variable. SYNTAX: mkvar [-n name] [-varType varType] [-mkvarflags mkvarflags] [-mkvarattributes mkvarattributes] PARAMETERS: -n name - The name of the variable to create. -varType varType - The type of the variable. -mkvarflags mkvarflags - The flags for the variable. -mkvarattributes mkvarattributes - The attributes for the variable. Seperated by # EXAMPLES: mkvar -n \"NewVariable\" -varType \"Text\" -mkvarflags \"ReadOnly\" -mkvarattributes \"Attribute1#Attribute2\" VAR TYPE VALUES: Description None Text Int Float Bool Date MKVAR FLAGS VALUES: Value Description Unique Values of the variable must be unique; only used for files, ignored for folders Mandatory Missing values are not permitted; only used for files, ignored for folders VerFreeUpdateAll Every version and every revision, regardless access, workflow states etc., are affected by the variable update VerFreeLatest Only the latest version is affected by the variable update"
  },
  "src/PRINT.html": {
    "href": "src/PRINT.html",
    "title": "PRINT Command Documentation | PDMShell",
    "keywords": "PRINT Command Documentation DESCRIPTION: Displays the biographical information about the specified file. SYNTAX: print [-f file] PARAMETERS: -f file - The file to print biographical information for. EXAMPLES: print -f file1.sldprt PREVIEW"
  },
  "src/QUIT.html": {
    "href": "src/QUIT.html",
    "title": "QUIT Command Documentation | PDMShell",
    "keywords": "QUIT Command Documentation DESCRIPTION: Quits the application. SYNTAX: quit PARAMETERS: None EXAMPLES: quit"
  },
  "src/RENAME.html": {
    "href": "src/RENAME.html",
    "title": "RENAME Command Documentation | PDMShell",
    "keywords": "RENAME Command Documentation DESCRIPTION: Renames a specified file. SYNTAX: rename [-filePath filePath] [-val value] [-search search] PARAMETERS: -filePath filePath - The filerename. -val value - The new name for the file. -search search - The search operation to use. EXAMPLES: rename -filePath \"oldname.sldprt\" -val \"newname.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. VALUE EVALUATION: The value parameter gets evaluated by PDMShell. PDMShell allows you to use placeholders in the new name, which will be replaced with actual values from the file. This can be useful to dynamically generate new names based on file properties or other variables. The following placeholders are supported: $filename - The file name without extension. $id - The file ID. $revision - The current revision of the file. $date - The current date. $time - The current time. $version - The current version of the file. $extension - The file extension. Additionally, you can use variables enclosed in square brackets (e.g., [VariableName]) to include values from other variables. Example: If you use the value \"$filename_$date_$version\", it will be replaced with the file name, current date, and version, resulting in something like \"oldname_10-12-2023_3\"."
  },
  "src/SETVAR.html": {
    "href": "src/SETVAR.html",
    "title": "SETVAR Command Documentation | PDMShell",
    "keywords": "SETVAR Command Documentation DESCRIPTION: Sets the value of a variable for a specified file. SYNTAX: setvar [-filePath filePath|-search search] -var variableName -val value [-configs configNames] PARAMETERS: -filePath filePath - The file to set the variable for. -var variableName - The variable to set. -val value - The value to assign to the variable. -configs configNames - The configuration names to set the variable for, separated by commas. -search search - The search operation to use. EXAMPLES: setvar -filePath \"file1.sldprt\" -var \"CustomVar\" -value \"NewValue\" REMARKS: The val parameter gets evaluated by the EvaluateAliases function. This function allows you to use placeholders in the new value, which will be replaced with actual values from the file. This can be useful to dynamically generate new values based on file properties or other variables. The following placeholders are supported: $filename - The file name without extension. $id - The file ID. $revision - The current revision of the file. $date - The current date. $time - The current time. $version - The current version of the file. $extension - The file extension. Additionally, you can use variables enclosed in square brackets (e.g., [VariableName]) to include values from other variables. The configuration names should be separated by commas. The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. Example: If you use the value \"$filename_$date_$version\", it will be replaced with the file name, current date, and version, resulting in something like \"oldname_10-12-2023_3\"."
  },
  "src/START.html": {
    "href": "src/START.html",
    "title": "START Command Documentation | PDMShell",
    "keywords": "START Command Documentation DESCRIPTION: Starts a program or the administration tool. SYNTAX: start [-p program_name] PARAMETERS: -p program_name - The program to start. EXAMPLES: start -p 'C:\\Program Files\\MyProgram.exe' REMARKS: start admin starts the administration tool"
  },
  "src/UNDOCHECKOUT.html": {
    "href": "src/UNDOCHECKOUT.html",
    "title": "UNDOCHECKOUT Command Documentation | PDMShell",
    "keywords": "UNDOCHECKOUT Command Documentation DESCRIPTION: Undoes a checkout operation. SYNTAX: undocheckout [-f filePath | -s search] PARAMETERS: -f filePath - The file(s) to undo the checkout for. -search search - The search operation to use. EXAMPLES: undocheckout -f \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/USERS.html": {
    "href": "src/USERS.html",
    "title": "USERS Command Documentation | PDMShell",
    "keywords": "USERS Command Documentation DESCRIPTION: Lists all the users in the active vault. SYNTAX: users PARAMETERS: EXAMPLES: users"
  },
  "src/VERSION.html": {
    "href": "src/VERSION.html",
    "title": "VERSION Command Documentation | PDMShell",
    "keywords": "VERSION Command Documentation DESCRIPTION: Lists versions of installed SOLIDWORKS. SYNTAX: version PARAMETERS: SOLIDWORKS - List versions of installed SOLIDWORKS EXAMPLES: version -solidworks"
  },
  "src/cdpdm.html": {
    "href": "src/cdpdm.html",
    "title": "Continuous Delivery | PDMShell",
    "keywords": "Continuous Delivery CDPDM is a PDM add-in by Blue Byte Systems Inc. that facilitates the deployment of PDM and task add-ins developed for you. The add-in communicates with our servers and allows the installation and uninstallation of all versions of your PDM add-ins. Advantages The advantages of using CDPDM are numerous: ✔️ No need to ask for or download CEX files. ✔️ Ability to switch between versions. ✔️ The conventional process of installing and updating add-ins is very tedious and time-consuming. Where to Find CDPDM If we have a developed a custom solution for you: CDPDM is provided in your project onboarding email. The email contains: Link to the CEX file. Link to this page with installation instructions. Link to your Customer Configuration File. If you have purchased a PDM product from us: Your Blue Byte Systems Inc account has all the information you need. You can access your account from this link here. From the Downloads tab, please download the archive file that contains CDPDM.cex and the Customer Configuration File. Note If you have purchased one of our PDM products and have had us develop a custom solution for you, please reach to us so we can generate a Customer Configuration File that lets you access all of your assets. How to Install Locate CDPDM.cex. In Windows 11, 10, and 7, internet downloads are blocked. Right-click on the CEX file, go to Properties, check Unblock, then click Apply and OK. Open the Administration tool. Log in to the vault. Please ensure you use a PDM user with Edit Add-Ins permission. In the Administration tool, click File > Open and browse to the CDPDM.cex file. Drag and drop the add-in from the CEX window onto the Add-ins node and wait for a few moments for CDPDM to be installed. Configuration Locate your Customer Configuration File. You can upload the Customer Configuration File via the Administration tool. Right-click on the add-in and click Upload Customer Configuration File... Browse to the Customer Configuration File. Note You can configure the settings of CDPDM by adding the credentials of the Customer Configuration File manually. Contact support for help. Updating Add-ins Right-click on CDPDM under Add-ins in the Administration tool and click Update Add-ins... This process may take a few moments depending on how many add-ins are in your vault. You will be prompted with a window like the following: You can: Install the selected add-in from the list. From the Version To Install dropdown, you can select which version to install and make sure to check the add-in. Uninstall the selected add-in from the vault (if it is installed). The installation process will ask you if you want to restart PDM. This may be beneficial to do after every upgrade, especially if you're validating a feature. Note Please allow for a few moments after you click Install/Update. The add-in will be downloaded unblocked and added to the vault. This operation includes suppressing some PDM dialog boxes."
  },
  "src/eula.html": {
    "href": "src/eula.html",
    "title": "PDMShell End User License Agreement | PDMShell",
    "keywords": "PDMShell End User License Agreement Introduction This End User License Agreement (\"EULA\") is a legal agreement between you (\"Licensee\") and Blue Byte Systems Inc. (\"Licensor\"), governing your use of the PDMShell software product and any associated documentation (collectively, the \"Software\"). By installing, copying, or otherwise using the Software, you agree to be bound by the terms of this EULA. If you do not agree to the terms of this EULA, do not install, copy, or otherwise use the Software. License Grant Licensor grants to Licensee a non-exclusive, non-transferable, non-sublicensable, limited right to use the Software on a single computer or device for Licensee's own internal business purposes. Restrictions Licensee agrees not to, and shall not permit others to: Resell, distribute, or sublicense the Software to any third party. Modify, adapt, translate, or create derivative works of the Software. Reverse engineer, decompile, disassemble, or otherwise attempt to derive the source code of the Software. Rent, lease, lend, or otherwise transfer the Software to any third party. Use the Software for any illegal purpose or in violation of any applicable law. 4. Intellectual Property The Software and all related intellectual property rights, including but not limited to copyrights, patents, trademarks, and trade secrets, are owned by Licensor or its licensors. This EULA does not grant Licensee any ownership rights in the Software. Termination This EULA shall automatically terminate upon Licensee's breach of any of its terms. Licensor may also terminate this EULA at any time upon written notice to Licensee. Upon termination, Licensee shall cease all use of the Software and delete all copies of the Software from its systems. Disclaimer of Warranty THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. LICENSOR DOES NOT WARRANT THAT THE SOFTWARE WILL BE ERROR-FREE OR THAT IT WILL MEET LICENSEE'S REQUIREMENTS. Limitation of Liability IN NO EVENT SHALL LICENSOR BE LIABLE FOR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION, DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR PUNITIVE DAMAGES, ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Governing Law This EULA shall be governed by and construed in accordance with the laws of British Columbia, Canada, without regard to its conflict of law provisions. Entire Agreement This EULA constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior or contemporaneous communications, representations, and agreements, whether oral or written. Severability If any provision of this EULA is held to be invalid or unenforceable, such provision shall be struck and the remaining provisions shall remain in full force and effect. Contact Information For any questions regarding this EULA, please contact: Blue Byte Systems Inc. info@bluebyte.ca By clicking \"I Agree\" or installing, copying, or otherwise using the Software, you acknowledge that you have read, understood, and agree to be bound by the terms of this EULA."
  },
  "src/introduction.html": {
    "href": "src/introduction.html",
    "title": "Introduction to PDMShell | PDMShell",
    "keywords": "Introduction to PDMShell Welcome to PDMShell, the command-line interpreter designed specifically for SOLIDWORKS PDM Professional. PDMShell provides engineers and IT professionals with a powerful and flexible tool for automating and streamlining tasks within the SOLIDWORKS PDM environment. By integrating command-line functionality, PDMShell allows users to perform routine PDM operations quickly, efficiently, and with greater control over their PDM data management processes. What is PDMShell? PDMShell is a comprehensive command-line interface (CLI) for SOLIDWORKS PDM Professional that simplifies file management, automation, and configuration tasks. It offers an extensive set of commands that can be used for common operations such as file check-ins and check-outs, variable management, user authentication, and much more. With PDMShell, users can interact with the PDM system without the need to open the SOLIDWORKS PDM client interface, making it an ideal tool for batch processing, automation, and system integration. Use Cases for PDMShell Batch Processing: Execute bulk operations like file renaming, setting variables, and automating workflows across multiple files or folders. System Integration: Integrate PDMShell commands into custom applications, scripts, or scheduled tasks to enhance the automation of business processes. Advanced File Management: Perform check-ins, check-outs, versioning, and other file management operations using the command line. Tip If you have a large vault with folder content exceeding +500 items, please consider disabling the intellisense if you see a performance hit. Getting Support How to Reach Out or report an issue? If you need support or have any questions, please don't hesitate to contact us by clicking the button below: Get Support"
  }
}