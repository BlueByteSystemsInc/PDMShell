{
  "index.html": {
    "href": "index.html",
    "title": "",
    "summary": ""
  },
  "src/ADDTOVAULT.html": {
    "href": "src/ADDTOVAULT.html",
    "title": "ADDTOVAULT Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "ADDTOVAULT Command Documentation DESCRIPTION: The addtovault command is used to add files or directories to the PDM vault. It supports various parameters to specify the source files or directories, search queries, and additional options such as ignoring existing files, updating references, and recursive operations. Note It is highly recommended that you run PDMShell as administrator before using this command. SYNTAX: addtovault -csv -dir -search -source -ignoreex -updaterefs -recursive PARAMETERS: csv: (Optional) Specifies the path to a CSV file containing a list of files or directories to be added to the vault. directory: (Optional) Specifies the target directory. If not specified current directory is used. If using the current directory, use \"\". search: (Optional) A search query to filter files or directories to be added to the vault. This is File Explorer search query. Use * as a wildcard. source: (Required) Specifies the source file or directory to be added to the vault. ignoreex: (Optional) Ignores files that already exist in the vault. This prevents overwriting existing files. updaterefs: (Optional) Updates references for the files being added to the vault. recursive: (Optional) Adds all files and subdirectories within the specified directory. This parameter is only applicable when adding directories. EXAMPLES: addtovault -source \"C:\\Projects\\file.txt\" -directory \"\" # adds text file to the current directory REMARKS: Use the recursive parameter with caution, as it will add all contents within the specified directory. The ignoreex parameter prevents overwriting files that already exist in the vault. Ensure you have the necessary permissions to add files or directories to the PDM vault. Files are left checked out after command completes. Note Use checkin -search % -recursive to check in all added files after calling addtovault. TUTORIAL:"
  },
  "src/CD.html": {
    "href": "src/CD.html",
    "title": "CD Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "CD Command Documentation DESCRIPTION: Changes the current PDM directory. SYNTAX: cd [-directory|-id] PARAMETERS: -directory(or d): The directory to switch to. The directory parameter can be a relative or absolute path in PDM. -id: ID of the folder to navigate to. EXAMPLES: cd -directory 'C:\\Vault\\NewFolder' # Navigates its newFolder REMARKS: Please be aware of the following special ways to change directory: cd.. # Navigates to the parent folder cd\\ # Navigates to the root of the vault If the user just created a new folder and wants to cd to it using autocomplete, they need to use the dir command with the -refresh parameter to force the session to load the current files and sub-folders in the active directory. Using -refresh might affect the performance of the session if the current folder has too many files and sub-folders. directory is the default parameter. You do not need to specify it if it is the only parameter in your command. Example: cd api #navigates to the api folder cd -id 755 #navigates to the folder with id 755 TUTORIAL:"
  },
  "src/CHECKIN.html": {
    "href": "src/CHECKIN.html",
    "title": "CHECKIN Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "CHECKIN Command Documentation DESCRIPTION: Performs a check-in operation on a specified file or many files. SYNTAX: checkin -search -filePath -comment -Checkinoptions PARAMETERS: search: The search operation to use. filePath: The file(s) to be checked in. This is the default parameter. comment: The comment to add to the check-in. Checkinoptions: The check-in options to use. EXAMPLES: checkin -filePath \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. If combining Checkinoptions parameters, the user needs to add + between the values. Checkinoptions Parameter Values: Member Description EdmUnlock_FailOnRegenerationNeed Fail if the file needs to be regenerated in the CAD program. NOTE: Only files resaved in SOLIDWORKS 2009 or later can trigger this flag EdmUnlock_ForceUnlock Unlock the file even if it is not modified EdmUnlock_IgnoreCorruptFile Ignore files with file formats unrecognized by SOLIDWORKS PDM Professional; without this flag, SOLIDWORKS PDM Professional returns E_EDM_INVALID_FILE if it encounters a corrupt file or a file containing a newer format than SOLIDWORKS PDM Professional can handle EdmUnlock_IgnoreReferences Silently unlock parent files without their references EdmUnlock_IgnoreRefsNotLockedByCaller Ignore references not locked by caller EdmUnlock_IgnoreRefsOutsideVault Ignore references to files outside the vault EdmUnlock_KeepLocked Keep the file checked out after creating the new version in the archive EdmUnlock_OverwriteLatestVersion Do not create a new version; overwrite the last version of the file with new changes EdmUnlock_RemoveLocalCopy Remove the local copy of the file from the hard disk after the file has been checked in EdmUnlock_Simple Check in the file using default behavior"
  },
  "src/CHECKOUT.html": {
    "href": "src/CHECKOUT.html",
    "title": "CHECKOUT Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "CHECKOUT Command Documentation DESCRIPTION: Performs a check out operation on a specified file or many files. SYNTAX: checkout -search -recursive -filePath PARAMETERS: -search: Search keyword -filePath: The file(s) to be checked out. This is the default parameter -recursive: Recursively check out all files in the current directory. Use in combination with search EXAMPLES: checkout -filePath file1.sldprt REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. TUTORIAL:"
  },
  "src/CLEARCACHE.html": {
    "href": "src/CLEARCACHE.html",
    "title": "CLEARCACHE Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "CLEARCACHE Command Documentation DESCRIPTION: Clears the local cache of a folder or many files. SYNTAX: clearcache -directory -search -toolboxflag -source PARAMETERS: -directory: The directory to clear the local cache of. -search: Search query. -toolboxflag: Ignore toolbox files. -source: CSV files containing complete local file paths to clear. First row is header. EXAMPLES: clearcache -search \"*.sldprt\" # Clears the cache of all `.sldprt` files in the current directory. clearcache -directory project -toolboxflag # Clears the directory called project whiling ignore toolbox files. clearcache -source \"source.csv\" # Clears the cache for the specified source."
  },
  "src/CLS.html": {
    "href": "src/CLS.html",
    "title": "CLS Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "CLS Command Documentation DESCRIPTION: Clears the current session. SYNTAX: cls PARAMETERS: Command has no parameters. EXAMPLES: cls REMARKS You can alternatively set the Line Limit Count from the settings to remind the session to clear every count of lines."
  },
  "src/COPYTREE.html": {
    "href": "src/COPYTREE.html",
    "title": "COPYTREE Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "COPYTREE Command Documentation DESCRIPTION: The copytree command is used to copy files and their associated metadata from a source directory or search results, with options to apply prefixes, suffixes, and other filters. This only works with assembly files. SYNTAX: copytree [-search|-filePath] -suffix -prefix -recursive -includedrawings -latest -directory PARAMETERS: -filePath: The source file or directory to copy. -directory: Specifies the target directory where the files will be copied. -search: A search query to filter files to be copied. -suffix: Adds a suffix to the copied files. -prefix: Adds a prefix to the copied files. -recursive: Copies files recursively from subdirectories. -includedrawings: Includes associated drawing files in the copy operation. -latest: Ensures the latest version of the files is copied. EXAMPLES: copytree -filePath \"fidget spinner.sldasm\" -suffix _ -directory \"\\new project\" #copies the fidget spinner to new project folder with suffix _ copytree -search \"*.sldasm\" -includedrawings -directory \"c:\\export\" #copies all assemblies in current directory to the export under c drive REMARKS: The -dir parameter specifies the target directory. If omitted, the current directory is used. Use the -recursive parameter to include all subdirectories in the operation. The -includedrawings parameter ensures that associated drawing files are included in the copy. The -latest parameter ensures that only the latest versions of files are copied."
  },
  "src/DELETE.html": {
    "href": "src/DELETE.html",
    "title": "DELETE Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "DELETE Command Documentation DESCRIPTION: The delete command is used to delete files or directories from the PDM system. It supports various parameters to specify the target files or directories, including file paths, directory paths, search queries, and IDs. The command also supports recursive deletion for directories. SYNTAX: delete [-filePath|-id] -directory -search -recursive -list -csv PARAMETERS: filePath: (Optional) Specifies the file path of the file to be deleted. directory: (Optional) Specifies the directory to be deleted. If used with the -recursive parameter, all files and subdirectories within the directory will also be deleted. search: (Optional) A search query to filter files or directories to be deleted. id: (Optional) Specifies the ID of the file to be deleted. recursive: (Optional) Deletes all files and subdirectories within the specified directory. This parameter is only applicable when deleting directories. list: (Optional) Lists all the deleted files. Specifying recursive with this parameter will do a drill down search and fetch all deleted files. csv: Exports a list of deleted files to a csv. This only works if list is specified. Note Use the exported csv from -csv with the recover command. EXAMPLES: Delete files matching a search query: delete -search \"%.sldprt\" # delete all parts in the current directory REMARKS: The delete command requires at least one of the following parameters: filePath, dir, search, or id. Use the recursive parameter with caution, as it will delete all contents within the specified directory. Ensure you have the necessary permissions to delete files or directories in the PDM system. TUTORIAL:"
  },
  "src/DELETEFROMSOURCE.html": {
    "href": "src/DELETEFROMSOURCE.html",
    "title": "DELETEFROMSOURCE Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "DELETEFROMSOURCE Command Documentation DESCRIPTION: The deletefromsource function is used to delete files from a csv file. SYNTAX: deletefromsource -filePath PARAMETERS: filePath : A string containing the IDs of the files and folders to be deleted. The IDs should be formatted appropriately for the function to process them. REMARKS: The source file should be a CSV file with a column header. This column must contain the IDs of the files to be deleted. The command will ignore any files that are checked out. EXAMPLES: deletefromsource -filePath \"files to delete.csv\""
  },
  "src/DESTORY.html": {
    "href": "src/DESTORY.html",
    "title": "Destroy Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "DESTROY Command Documentation DESCRIPTION: The destroy command is used to permanently delete files that have been marked as deleted in a specified directory. This command supports recursive deletion and filtering by date. SYNTAX: destroy -directory -recursive -date PARAMETERS: directory: The directory to destroy. recursive: Enables recursive search (for files). date: (Optional) Specifies a date filter. Only files deleted on or before the specified date will be destroyed. The date format should be YYYY-MM-DD. EXAMPLES: destroy -directory \"C:\\Projects\\Project\" # destroys all deleted files in project folder REMARKS: The directory parameter is mandatory and must specify a valid directory. Use the recursive parameter with caution, as it will process all subdirectories within the specified directory. The date parameter allows you to target files deleted on or before the specified date, providing more control over the destruction process. This action is irreversible. Ensure you have the necessary permissions and have reviewed the files before executing the command. TUTORIAL:"
  },
  "src/DIR.html": {
    "href": "src/DIR.html",
    "title": "DIR Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "DIR Command Documentation DESCRIPTION: Displays a list of files and subdirectories in a directory. SYNTAX: dir -sort -columns -csv -refresh PARAMETERS: -sort: The column name to sort the list of files and folders with. -columns: The columns to display, separated by commas. These are PDM variables drawn from the @ tab. -csv: Export the directory listing to a CSV file. Must include the csv extension -refresh: Refreshes the session to load the current files and sub-folders in the active directory in the autocomplete list. -recursive: Lists all files and all folders in the current directory recursively. EXAMPLES: dir #\"C:\\Vault\\Documents\" dir -sort \"name\" -cols \"description,partnumber\" -csv \"output.csv\" -refresh REMARKS: Use the -refresh parameter to force the session to load the current files and sub-folders in the active directory. Do not use this when the current folder has many items. The CSV file will be checked into the current directory. TUTORIAL:"
  },
  "src/DUMP.html": {
    "href": "src/DUMP.html",
    "title": "DELETEFROMSOURCE Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "DUMP Command Documentation DESCRIPTION: Dumps all session text into a log file and check it back into the vault. SYNTAX: dump filePath PARAMETERS: filePath: The log file to dump session details into. EXAMPLES: dump -filePath \"$release_script_$yyyy_$mm_$dd_$guid.txt\" REMARKS: To make sure your logs are always unique, use $guid or the date/time place holders. You can get more information about these place holders here."
  },
  "src/EDITVARS.html": {
    "href": "src/EDITVARS.html",
    "title": "EDITVARS Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "EDITVARS Command Documentation DESCRIPTION: Opens the PDM variable editor. SYNTAX: editvars PARAMETERS: None EXAMPLES: editvars # open the PDM variable editor TUTORIAL:"
  },
  "src/EVAL.html": {
    "href": "src/EVAL.html",
    "title": "Dynamic Placeholders | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "Dynamic Placeholders in PDMShell Overview The Dynamic Placeholders feature in PDMShell allows you to substitute values dynamically using placeholders. This functionality is supported by several commands and enables the use of file or folder properties, system variables, and other contextual information to generate new values automatically. Dynamic Placeholders are not a standalone command but a feature used by specific commands to process the value parameter or other relevant inputs. Commands Supporting Dynamic Placeholders The following commands support the use of dynamic placeholders: Commands Using the Current Folder as the Backing Object (directory parameter): cd: Change the current directory. mkdir: Create a new directory. export: Export commands to a file. addtvault: Add a vault with the directory as the backing object. Commands Using Files or Folders as the Backing Object: rename: Uses the value parameter for renaming files or folders. renamefromsource: The new file is evaluated if the evaluatealiases parameter is specified. setvar: Uses the value parameter to set variables for files or folders. Placeholders for Dynamic Substitution The value parameter in supported commands can include placeholders that are dynamically replaced with actual values based on the context. The placeholders differ slightly depending on whether the backing object is a file or a folder. Placeholders for Files $value: Existing value of the variable. $name: The file name with extension. $nameWithoutExtension: The file name without extension. $extension: The file extension. $id: The file ID. $revision: The current revision of the file (PDM revision, not the PDM variable). $version: The current version of the file. $fullyQualifiedName: The full local path of the file. $fullyQualifiedFolderName: The full local path of the folder containing the file. $folderName: The name of the folder containing the file. Placeholders for Folders $value: Existing value of the variable. $name: The folder name. $folderName: The name of the parent folder. $id: The folder ID. $fullyQualifiedName: The full local path of the folder. Common Placeholders (Applicable to Both Files and Folders) $username: The name of the logged-in user. $vaultName: The name of the vault. $yyyy: The current year. $mm: The current month (two digits). $hh: The current hour (two digits). $mi: The current minute (two digits). $ss: The current second (two digits). $date: The current date. $time: The current time in the current locale. $guid: Unique identifier. Using Variables in Dynamic Placeholders In addition to placeholders, you can include other variables by enclosing them in square brackets (e.g., [VariableName]). These variables are dynamically resolved based on the context of the file or folder. Example Usage Here’s an example of how to use dynamic placeholders in a command: Renaming a File rename -filePath 1.sldprt -value \"$nameWithoutExtension_$yyyy$mm$dd$extension\""
  },
  "src/EXPORT.html": {
    "href": "src/EXPORT.html",
    "title": "EXPORT Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "EXPORT Command Documentation DESCRIPTION: The ExportCommand allows you to export SOLIDWORKS files from the PDM vault to various formats using SOLIDWORKS. This command supports exporting a single file or multiple files found via search, with options for specifying file extensions, export location, and more. SYNTAX: export [-search|-filePath] -name -directory -extensions -recursive PARAMETERS: The export command requires several parameters: filePath: Path to the file to export (relative or absolute). name: The base name for the exported file(s). This supports evaluation. More information here. directory: The target folder for exported files. extensions: Comma-separated list of file extensions to export to (e.g., pdf,dxf). search: Search query to find files for export. recursive: If set, search will include subfolders. EXAMPLE: Export a file to PDF and DXF in a specific directory: export -filePath\"Designs/part1.sldprt\" -name \"part1_export\" -directory \"Exports\" -extensions \"pdf,dxf\""
  },
  "src/FROGLEAP.html": {
    "href": "src/FROGLEAP.html",
    "title": "FROGLEAP Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "FROGLEAP Command Documentation DESCRIPTION: Frog leaps an old version as newest. SYNTAX: frogleap -search -filePath -oldVersion PARAMETERS: search: The search operation to use. filePath: The file(s) to be frog leaped. This is the default parameter. oldVersion: The old version to leap. This is an integer. EXAMPLES: frogleap -filePath \"file1.sldprt\" -oldVersion 2 REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. TUTORIAL:"
  },
  "src/GET.html": {
    "href": "src/GET.html",
    "title": "Get Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "GET Command Documentation DESCRIPTION: Retrieves a specified version of a file or files (via search). SYNTAX: get -search -filePath -version PARAMETERS: search: The search operation to use. filePath: The file(s) to retrieve. This is the default parameter. -version: The version of the file to retrieve. EXAMPLES: get -filePath \"file1.sldprt\" -Version 2 REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/GETVAR.html": {
    "href": "src/GETVAR.html",
    "title": "GETVAR Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "GETVAR Command Documentation DESCRIPTION: Gets the value of a variable for a specified file or folder. SYNTAX: getvar -filePath -variableName -configs -clear -version PARAMETERS: filePath : The file or folder to get the variable from. variableName : The variable name to retrieve. configs : The configuration names to retrieve the variable from, separated by commas. clear : Clears the variable value. version : The version of the file to retrieve the variable from. EXAMPLES: getvar -filePath \"file1.sldprt\" -variableName \"CustomVar\" REMARKS: The configuration names should be separated by commas. The variable must be in the data card. This comand will return what's in the locale cache which may not be necessarily the latest version. For that, please use getVarFromDB."
  },
  "src/GETVARFROMDB.html": {
    "href": "src/GETVARFROMDB.html",
    "title": "GETVARFROMDB Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "GETVARFROMDB Command Documentation DESCRIPTION: Gets the value of a variable for a specified file or folder directly from the database. SYNTAX: getvarfromdb -filePath -variableName -configs PARAMETERS: filePath : The file or folder to get the variable from. variableName : The variable name to retrieve from the database. configs : The configuration names to retrieve the variable from, separated by commas. EXAMPLES: getvarfromdb -f \"file1.sldprt\" -variableName \"CustomVar\" REMARKS: The configuration names should be separated by commas. This command will always return the latest value."
  },
  "src/HELP.html": {
    "href": "src/HELP.html",
    "title": "HELP Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "HELP Command Documentation DESCRIPTION: Provides help about a command. SYNTAX: help [-command|-c] PARAMETERS: -command: The specific command you need help with. EXAMPLES: help -c cd #opens the help page about the change directory command"
  },
  "src/HISTORY.html": {
    "href": "src/HISTORY.html",
    "title": "HISTORY Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "HISTORY Command Documentation DESCRIPTION: Prints the history of a file. SYNTAX: history [-search|-filePath] PARAMETERS: search: The search operation to use. filePath: The file to get the history for. EXAMPLES: history -f \"file1.sldprt\" # lists the history of file1 REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. PREVIEW:"
  },
  "src/INBOX.html": {
    "href": "src/INBOX.html",
    "title": "INBOX Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "INBOX Command Documentation DESCRIPTION: Opens the PDM inbox and sends a message as the logged-in user. SYNTAX: inbox -message PARAMETERS: message: The message to send. Can be HTML code. EXAMPLES: inbox -message 'File checked in successfully' # sends the specified message to the logged-in user"
  },
  "src/INFOVAR.html": {
    "href": "src/INFOVAR.html",
    "title": "INFOVAR Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "INFOVAR Command Documentation DESCRIPTION: Gets information about a variable. SYNTAX: infovar [-v variable_name] PARAMETERS: -v variable_name - The variable name to retrieve information for. EXAMPLES: infovar -v Description Preview"
  },
  "src/KILL.html": {
    "href": "src/KILL.html",
    "title": "KILL Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "KILL Command Documentation DESCRIPTION: Kills a process. SYNTAX: kill -process PARAMETERS: process: The process to terminate (with extension) EXAMPLES: kill sldworks.exe # terminates all open SOLIDWORKS sessions. REMARKS: This command uses taskkill from the command line. This command requires PDM to be run as an administrator. PDMShell adds a note called ADMIN in the top-right area of its window when it is open as admin."
  },
  "src/LOGIN.html": {
    "href": "src/LOGIN.html",
    "title": "LOGIN Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "LOGIN Command Documentation DESCRIPTION: Authenticates a user to a specified vault. SYNTAX: login [-auto|-win -username -password|-external -username -password ] -vaultname PARAMETERS: Auto: Automatic authentication with current user. Displays login dialog box if not logged in. Win: Automatic Windows authentication with current user. Does not display login dialog box. External: Toggle ensures that a license is consumed. Username: Username. Password: Password. vaultName: Vault Name. EXAMPLES: login -username admin -password ******** -vaultName bluebyte #logs into the bluebyte vault with a username ans a password login -auto -vaultName bluebyte #logs into the blue byte vault using the existing PDM session REMARKS: You must have a local vault view before you can start using PDMShell. The external parameter allows an application that is not supplied and supported by SOLIDWORKS Corporation to: Log into SOLIDWORKS PDM Professional Log into a vault view TUTORIAL:"
  },
  "src/MKDIR.html": {
    "href": "src/MKDIR.html",
    "title": "MKDIR Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "MKDIR Command Documentation DESCRIPTION: Creates a new folder. SYNTAX: mkdir -directory PARAMETERS: directory: The folder to create. Supports placeholders. Note For more information about placeholders, refer to the placeholders documentation. EXAMPLES: mkdir -directory \"NewFolder\" # Creates a new folder called NewFolder REMARKS: To get the new folder to show up in the auto-complete, please use the command cd -refresh. directory is the default parameter. You do not need to specify it."
  },
  "src/MKVAR.html": {
    "href": "src/MKVAR.html",
    "title": "MKVAR Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "MKVAR Command Documentation DESCRIPTION: Creates a new variable. SYNTAX: mkvar -name -varType -mkvarflags -mkvarattributes PARAMETERS: name: The name of the variable to create. varType: The type of the variable. mkvarflags: The flags for the variable. mkvarattributes: The attributes for the variable. Seperated by # EXAMPLES: mkvar -name \"NewVariable\" -varType \"Text\" -mkvarflags \"ReadOnly\" -mkvarattributes \"Attribute1#Attribute2\" VAR TYPE VALUES: Description None Text Int Float Bool Date MKVAR FLAGS VALUES: Value Description Unique Values of the variable must be unique; only used for files, ignored for folders Mandatory Missing values are not permitted; only used for files, ignored for folders VerFreeUpdateAll Every version and every revision, regardless access, workflow states etc., are affected by the variable update VerFreeLatest Only the latest version is affected by the variable update"
  },
  "src/PRINT.html": {
    "href": "src/PRINT.html",
    "title": "PRINT Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "PRINT Command Documentation DESCRIPTION: Displays the biographical information about the specified file. SYNTAX: print [-filePath|-id] PARAMETERS: -filePath: The file to print biographical information for. EXAMPLES: print -filePath \"C:\\SOLIDWORKSPDM\\Bluebyte\\API\\Sandbox\\fidget spinner\\___108545.SLDPRT\" The print command will print an output like the following: File Name : ___108545.SLDPRT Local Path : C:\\SOLIDWORKSPDM\\Bluebyte\\API\\Sandbox\\fidget spinner\\___108545.SLDPRT Folder Path : \\API\\Sandbox\\fidget spinner File ID : 115310 Folder ID : 457 HEXID : 1C26E Archive Path : E\\0001C26E Checked out? : False State ID : 158 State Name : New State Current state : New State [Workflow: Vaulted] Current Ver : 7 Current Rev : Transitions : Return Engineering [193] From New State [158] To In Design [9]"
  },
  "src/QUIT.html": {
    "href": "src/QUIT.html",
    "title": "QUIT Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "QUIT Command Documentation DESCRIPTION: Quits the application. SYNTAX: quit PARAMETERS: None REMARKS: This commands needs user confirmation complete but runs silently in scripts. Read more abotu scripting."
  },
  "src/REBOOT.html": {
    "href": "src/REBOOT.html",
    "title": "REBOOT Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "REBOOT Command Documentation DESCRIPTION: Hard PDM reboot. SYNTAX: reboot PARAMETERS: This command has no parameters. EXAMPLES: reboot REMARKS: This command uses taskkill from the command prompt to kill explorer.exe and edmserver.exe then restart explorer.exe. It requires PDM to be run as an administrator."
  },
  "src/RECOVER.html": {
    "href": "src/RECOVER.html",
    "title": "RECOVER Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "RECOVER Command Documentation DESCRIPTION: The recover command is used to recover files from a specified directory or source. It supports optional parameters for search queries and recursive operations. SYNTAX: recover -directory -search -recursive -source PARAMETERS: directory: Specifies the directory to recover files from. This parameter is optional. search: A search query to filter the files to recover. This parameter is optional. Supports % and * as wildcards. recursive: Enables recursive recovery of files within subdirectories. This parameter is optional. source: Specifies the source to recover files from. This parameter is optional. Note To generate a source csv file, use the command delete -list -csv deletedfiles.csv to generate a list of all deleted files in the current directory. You can include recursive to get all files from the subdirectories. To generate a source csv file for a particular directory, use directory in combination with list and csv. EXAMPLES: recover -source \"source.csv\" # Recovers files from the specified source. recover -directory \"\" # Recovers files from the current directory. REMARKS: Ensure that the specified directory or source exists and is accessible. TUTORIAL:"
  },
  "src/RENAME.html": {
    "href": "src/RENAME.html",
    "title": "RENAME Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "RENAME Command Documentation DESCRIPTION: Renames a specified file. SYNTAX: rename -filePath -value -search PARAMETERS: filePath: The filerename. value: The new name for the file. search: The search operation to use. EXAMPLES: rename -filePath \"oldname.sldprt\" -val \"newname.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. VALUE EVALUATION: The value parameter gets evaluated by PDMShell. PDMShell allows you to use placeholders in the new name, which will be replaced with actual values from the file. This can be useful to dynamically generate new names based on file properties or other variables. The following placeholders are supported: $filename - The file name without extension. $id - The file ID. $revision - The current revision of the file. $date - The current date. $time - The current time. $version - The current version of the file. $extension - The file extension. Additionally, you can use variables enclosed in square brackets (e.g., [VariableName]) to include values from other variables. EXAMPLES: If you use the value \"$filename_$date_$version\", it will be replaced with the file name, current date, and version, resulting in something like \"oldname_10-12-2023_3\"."
  },
  "src/RENAMEFROMSOURCE.html": {
    "href": "src/RENAMEFROMSOURCE.html",
    "title": "RENAMEFROMSOURCE Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "RENAMEFROMSOURCE Command Documentation DESCRIPTION: The renamefromsource command is used to rename files in the PDM system based on a source CSV file. The CSV file provides the necessary information to map file IDs to their new names and folder IDs. This command supports alias evaluation for dynamic renaming. SYNTAX: renamefromsource -filePath -evaluatealias -csv PARAMETERS: filePath: (Required) The source file path. This must be a CSV file with three columns: File ID: The ID of the file to be renamed. New File Name: The new file name, including the extension. Folder ID: The ID of the folder containing the file. evaluatealias: Toggle. This allows placeholders to be used in the new file name. csv: Specifies the path to an additional CSV file for batch renaming. EXAMPLES: Rename files using a source CSV file: renamefromsource -filePath \"C:\\data\\rename.csv\" -evaluatealias # renames all the files in rename.csv while evaluating aliases CSV FORMAT: The source CSV file must have the following structure: File ID New File Name Folder ID 123 newfile1.txt 456 124 anotherfile.docx 457 125 examplefile_backup.pdf 458 File ID: The ID of the file to be renamed. New File Name: The desired new name for the file, including the extension. Folder ID: The ID of the folder containing the file. REMARKS: The filePath parameter is mandatory and must point to a valid CSV file. The evaluatealias parameter supports dynamic placeholders for renaming, such as $name, $revision, $yyyy, etc. Ensure the CSV file is properly formatted with three columns: File -ID, New File Name, and Folder ID. The csv parameter is optional and can be used to provide additional renaming data. For more information about alias evaluation, refer to the Dynamic Placeholders in PDMShell. TUTORIAL:"
  },
  "src/RUNSCRIPT.html": {
    "href": "src/RUNSCRIPT.html",
    "title": "RUNSCRIPT Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "RUNSCRIPT Command Documentation DESCRIPTION: Runs a PDMShell script. SYNTAX: runscript -source -filePath -search -recursive PARAMETERS: source: Script file. filePath: File path to run the script on. search: Search query to filter files. recursive: If specified, the command will run script on all files recursively in subdirectories. EXAMPLES: runscript -filePath pdmscript.script -search \"%.sldprt\" -recursive # this will run pdm.script on all part files in the active directory and its subdirectories REMARKS: A good way to start a script is using the start notepad.exe command to open up notepad.exe. In your script, you must use the alias $completefilename and $completefoldername to reference the file your script is targeting. This is required with the search or filePath parameters. FREE VERSION LIMIT: The free version is limited to 10 lines per script."
  },
  "src/SEARCH.html": {
    "href": "src/SEARCH.html",
    "title": "SEARCH Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "SEARCH Command Documentation DESCRIPTION: The search command allows users to search for files and folders in the current directory. It supports recursive searches, filtering, and output customization. SYNTAX: search -search -recursive -includesubfolders -csv -columns PARAMETERS: search: Search keyword. This supports SQL wildcard %. recursive: Searches through all subdirectories recursively. includesubfolders: Includes subfolders in the search results. csv: Outputs the search results in CSV format. columns: Specifies the columns to include in the output. EXAMPLES: Example 1: Basic Search search -search % # prints all the files in the current directory Performs a basic search in the current directory. Example 2: Recursive Search with Subfolders search -search -recursive -includesubfolders # prints all the files and folders in the current directory Searches all files and folders, including subdirectories. Example 3: Export Results to CSV search -search -csv -columns \"Description,PartNumber\" # Prints all the files in the current directory with their descriptions and part numbers Exports the search results to a CSV file with specified columns. NOTES: Ensure the current directory is set correctly before running the command. Use the -columns parameter to customize the output format. Data is pulled from @ for configuration-supported documents. TUTORIAL:"
  },
  "src/SETVAR.html": {
    "href": "src/SETVAR.html",
    "title": "SETVAR Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "SETVAR Command Documentation DESCRIPTION: Sets the value of a variable for a specified checked out file or many checked out files. SYNTAX: setvar [-filePath|-search] -variableName -value [-configNames] [-stringformat] PARAMETERS: -filePath: The file to set the variable for. -variableName: The variable to set. -value: The value to assign to the variable. -configNames: The configuration names to set the variable for, separated by commas. -search: The search operation to use. -stringformat: string format. See remarks section. EXAMPLES: setvar -filePath file1.sldprt -variableName Description -value $value -stringformat UpperCase # Upper case the current value. EVALUATION: The value parameter gets evaluated by PDMShell. This feature allows you to use placeholders in the new value, which will be replaced with actual values from the file or folder. This can be useful to dynamically generate new values based on file or folder properties or other variables. The following placeholders are supported: For Files: $value: Existing value of the variable. $name: The file name with extension. $nameWithoutExtension: The file name without extension. $username: The name of the logged-in user. $vaultName: The name of the vault. $yyyy: The current year. $mm: The current month (two digits). $hh: The current hour (two digits). $mi: The current minute (two digits). $ss: The current second (two digits). $id: The file ID. $revision: The current revision of the file (PDM revision, not the PDM variable). $date: The current date. $time: The current time in the current locale. $version: The current version of the file. $extension: The file extension. $fullyQualifiedName: The full local path of the file. $fullyQualifiedFolderName: The full local path of the folder containing the file. $folderName: The name of the folder containing the file. For Folders: $value: Existing value of the variable. $name: The folder name. $folderName: The name of the parent folder. $id: The folder ID. $fullyQualifiedName: The full local path of the folder. $username: The name of the logged-in user. $vaultName: The name of the vault. $yyyy: The current year. $mm: The current month (two digits). $hh: The current hour (two digits). $mi: The current minute (two digits). $ss: The current second (two digits). $date: The current date. $time: The current time in the current locale. Additionally, you can use variables enclosed in square brackets (e.g., [VariableName]) to include values from other variables. These variables are dynamically resolved based on the context of the file or folder. REMARKS The configNames parameter should be separated by commas. If omitted, PDMShell uses @ for configuration-supported documents. The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. The stringformat parameter allows you to format the value of the variable using predefined string formatting options. The following formats are supported: UpperCase: Converts the entire string to uppercase. LowerCase: Converts the entire string to lowercase. CamelCase: Converts the string to camel case, where the first word is lowercase, and subsequent words are capitalized (e.g., exampleString). FirstLetterCase: Capitalizes the first letter of the string and converts the rest to lowercase (e.g., Example). TUTORIAL:"
  },
  "src/SETVARSFROMSOURCE.html": {
    "href": "src/SETVARSFROMSOURCE.html",
    "title": "SETVARSFROMSOURCE Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "SETVARSFROMSOURCE Command Documentation DESCRIPTION: Sets variables for multiple files using a CSV file as the source. SYNTAX: setvarsfromsource -source PARAMETERS: -source: The CSV file containing the file IDs and variable values. CSV FILE FORMAT: The CSV file should have the following format: FileID,Variable1,Variable2,... XXXX,Value1,Value2,... XXXX,Value1,Value2,... EXAMPLES: setvarsfromsource -source variables.csv # the source file must be exist in the current directory REMARKS: The CSV file should have the first column as the file ID and the subsequent columns as the variable names. You need to include the extension in the filename. This file can be outside the vault. The best way to generate a source CSV is to use the dir command or the search command on a folder with the -csv parameter and the columns, like: dir -columns Description,\"Part Number\" -csv data.csv search -search %.sldprt -recursive -columns Description,\"Part Number\" -csv data.csv #this will save all parts from all levels in the current directory with the columns Description and Part Number TUTORIAL:"
  },
  "src/START.html": {
    "href": "src/START.html",
    "title": "START Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "START Command Documentation DESCRIPTION: The start command is used to launch programs, tools, or specific applications. It supports launching SOLIDWORKS, the PDM administration tool, Notepad, Windows Explorer, and other custom programs. Additionally, it can open the SOLIDWORKS API help file or the current folder in Explorer. SYNTAX: start -process -swversion PARAMETERS: process: (Optional) Specifies the program to start. Common values include: admin: Launches the PDM administration tool. notepad: Launches Notepad. apihelp: Opens the SOLIDWORKS API help file. explorer: Opens Windows Explorer. .: Opens the current folder in Windows Explorer. swversion: (Optional) Specifies the version of SOLIDWORKS to launch. The year should be provided (e.g., 2023). EXAMPLES: # Launch the PDM administration tool. start admin REMARKS: Launching SOLIDWORKS: If the -wversion parameter is provided, the command attempts to locate and launch the specified version of SOLIDWORKS. If the version is not found, an error message will be displayed. Administration Tool: The admin option launches the PDM administration tool. Ensure the tool is installed and accessible. Notepad: The notepad option launches the default Notepad application from the system directory. API Help: The apihelp option opens the SOLIDWORKS API help file (api_gb.chm) from the PDM installation directory. Explorer: The explorer option opens Windows Explorer. Using . opens the current folder. Error Handling: If the specified program or process cannot be found, an error message will be displayed."
  },
  "src/TASKSCRIPT.html": {
    "href": "src/TASKSCRIPT.html",
    "title": "Run Script as a Task | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "Overview TaskScript is a custom PDM task add-in developed by Blue Byte Systems Inc. that allows you to execute PDMShell scripts the same way you would use the built-in Convert task. This task can be requested upon purchase of a premium license of PDMShell. With TaskScript, administrators can create configurable tasks that run custom .pdmshell scripts using the pdmcli engine on selected files within the vault. Key Features Execute PDMShell commands in response to PDM task triggers Dynamic script editing and variable binding Reuses existing scripts stored locally or downloaded Supports file filtering based on extensions Evaluates placeholders like $fileName, $localPath, and more Handles script failure with detailed logging Example Script cd/ print -id $id You can request a script by emailing us via the Request Script button. Remarks You can include the extensions: sldprt;sldasm;slddrw are the default value. TaskScript will run PDMShell sessions on all affected documents by the task. Do not forget to set the Command Menu tab. Placeholder Variables TaskScript supports dynamic variables that are replaced at runtime for each selected file. Below is a list of available placeholders: Placeholder Description $localPath Full local path to the selected file $fileName File name (including extension) $id Internal PDM file ID $folderPath Full local path to the file's parent folder $folderID Internal PDM folder ID $fileNameWithoutExtension File name without the extension $vaultName Name of the vault the file belongs to $vaultRootFolder Local root path of the vault $(Variable.Configuration) Value of a custom PDM variable for a given configuration $(Variable.Configuration) Use @ for the @ tab. Example: $(Description.@) Use empty string for files with no configurations. Example: $(Description. )"
  },
  "src/UNDOCHECKOUT.html": {
    "href": "src/UNDOCHECKOUT.html",
    "title": "UNDOCHECKOUT Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "UNDOCHECKOUT Command Documentation DESCRIPTION: Undoes a checkout operation. SYNTAX: undocheckout [-filePath | -search] PARAMETERS: filePath: The file to undo the checkout for. search: The search operation to use. EXAMPLES: undocheckout -f \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/USERS.html": {
    "href": "src/USERS.html",
    "title": "USERS Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "USERS Command Documentation DESCRIPTION: Lists all the users in the active vault. SYNTAX: ``bash users ## PARAMETERS: ## EXAMPLES: ```bash users"
  },
  "src/VERSION.html": {
    "href": "src/VERSION.html",
    "title": "VERSION Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "VERSION Command Documentation DESCRIPTION: Displays version information for PDMShell, installed SOLIDWORKS, or the PDM client. SYNTAX: version -solidworks -pdm PARAMETERS: No parameters: Displays the version of PDMShell. solidworks: Displays the versions of installed SOLIDWORKS. pdm: Displays the version of the installed PDM client. PARAMETERS: SOLIDWORKS - List versions of installed SOLIDWORKS EXAMPLES: version -solidworks # lists all the installed solidworks versions"
  },
  "src/dispatch.html": {
    "href": "src/dispatch.html",
    "title": "Notes About Running PDMShell Scripts from Dispatch | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "Notes About Running PDMShell Scripts from Dispatch When you want to run PDMShell scripts from Dispatch, you can use the Shell Command action. Shell Command Settings Verb: Leave this field empty. Filename: Specify the path to the PDMShell executable, which is pdmcli.exe. Note Do not wrap the path in quotes (\"\"), even if it contains spaces. Parameters: Use the following format: runscript \"pathToScript\" [additional parameters] The pathToScript must be wrapped in quotes (\"\") if it contains spaces. Additional parameters can be passed to the script as needed. Example: Dispatch Shell Execute Configuration Verb: #leave this empty Filename: C:\\Program Files (x86)\\BLUE BYTE SYSTEMS INC\\PDMShell\\PDMCLI.exe Parameters: runscript \"C:\\Scripts\\frogleap.pdmshell\" \"%PathToSelectedFile%\" \"%OldVersion%\" Example Script: In the PDMShell script (frogleap.pdmshell), you can reference the parameters as follows: # check selected file out checkout -filePath \"$parameter1$\" # frogleap version to specified version frogleap -filePath \"$parameter1$\" -oldVersion \"$parameter2$\" # save changes checkin -filePath \"$parameter1$\" -comment \"prompted version $parameter2$\" # you must call this quit Tutorial Tips for Running PDMShell Scripts from Dispatch Test Your Scripts: Always test your PDMShell scripts independently before integrating them with Dispatch. Use Quotes for Paths: Wrap paths and parameters in quotes (\"\") if they contain spaces to avoid errors."
  },
  "src/eula.html": {
    "href": "src/eula.html",
    "title": "EULA | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "End User License Agreement 1. Introduction This End User License Agreement (\"EULA\") is a legal agreement between you (\"Licensee\") and Blue Byte Systems Inc. (\"Licensor\"), governing your use of the PDMShell software product and any associated documentation (collectively, the \"Software\"). By installing, copying, automating (including automatic or unattended use), or otherwise using the Software, you agree to be bound by the terms of this EULA. If you do not agree, do not install, copy, automate, or otherwise use the Software. 2. License Grant Licensor grants Licensee a non-exclusive, non-transferable, non-sublicensable, limited right to use the Software on a single computer or device for Licensee’s own internal business purposes. Special Licensing Requirement: Data migration companies, SOLIDWORKS resellers, or third-party providers utilizing or incorporating PDMShell into their commercial services or products must purchase a special licensing model from Blue Byte Systems Inc. Use without acquiring such licensing is strictly prohibited. 3. Restrictions Licensee agrees not to, and shall not permit others to: Resell, distribute, or sublicense the Software to any third party. Modify, adapt, translate, or create derivative works of the Software. Reverse engineer, decompile, disassemble, or otherwise attempt to derive the source code of the Software. Rent, lease, lend, or otherwise transfer the Software to any third party. Use the Software for any illegal purpose or in violation of applicable law. To improve our software and validate licenses, the Software may collect certain metadata about the machine it is installed on, including but not limited to the IP address, SOLIDWORKS version, and operating system version. This information is used solely for the purposes of enhancing the Software and ensuring compliance with licensing terms. By using the Software, you consent to this data collection. 5. Intellectual Property The Software and all related intellectual property rights, including copyrights, patents, trademarks, and trade secrets, are owned by Licensor or its licensors. This EULA does not grant Licensee any ownership rights in the Software. 6. Termination This EULA shall automatically terminate upon Licensee’s breach of any of its terms. Licensor may also terminate this EULA at any time upon written notice to Licensee. Upon termination, Licensee shall cease all use of the Software and delete all copies of the Software from its systems. 7. Disclaimer of Warranty THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. LICENSOR DOES NOT WARRANT THAT THE SOFTWARE WILL BE ERROR-FREE OR THAT IT WILL MEET LICENSEE’S REQUIREMENTS. 8. Limitation of Liability IN NO EVENT SHALL LICENSOR BE LIABLE FOR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION, DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR PUNITIVE DAMAGES, ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 9. Changes to Terms Licensor reserves the right, in its sole discretion, to modify or update this EULA at any time without prior notice. Continued use of the Software constitutes acceptance of the modified or updated terms. 10. Governing Law This EULA shall be governed by and construed in accordance with the laws of British Columbia, Canada, without regard to its conflict of law provisions. 11. Entire Agreement This EULA constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior or contemporaneous communications, representations, and agreements, whether oral or written. 12. Severability If any provision of this EULA is held to be invalid or unenforceable, such provision shall be struck, and the remaining provisions shall remain in full force and effect. 13. Contact Information For any questions regarding this EULA, please contact: Blue Byte Systems Inc. Email: amen@bluebyte.biz"
  },
  "src/faq.html": {
    "href": "src/faq.html",
    "title": "FAQ | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "Frequently Asked Questions (FAQ) for PDMShell 1. Why are some commands marked as \"N/A\" or have no description after installing a new version? This issue can occur if the new version of PDMShell is installed over an existing version without properly uninstalling the old one. Solution: Uninstall the current version of PDMShell manually from your system. Download the latest version of PDMShell from our official website. Reinstall the downloaded version. This ensures that all commands and descriptions are updated correctly. 2. How do I install or update PDMShell? You can install or update PDMShell either from our official website or via the Microsoft Store. For detailed instructions, refer to the Installation Guide. 3. Do I need administrative privileges to install PDMShell? Yes, you may need administrative privileges to install or update PDMShell, especially if you are installing it from the official website. 4. Can I use PDMShell without a premium license? Yes, PDMShell offers a Free License that includes basic functionality. However, advanced features, such as workflow integration, require a Premium License. 5. How do I report a bug or request support? You can report bugs or request support by visiting our Support Page or emailing us at support@bluebyte.biz. 6. What are the system requirements for PDMShell? PDMShell requires: Operating System: Windows 10/11 SOLIDWORKS PDM Professional: Version 2014 or newer SOLIDWORKS 3D: Version 2017 or newer (for commands that use SOLIDWORKS) For additional questions, feel free to contact us at support@bluebyte.biz."
  },
  "src/howtoinstall.html": {
    "href": "src/howtoinstall.html",
    "title": "How to Install/Update PDMShell | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "How to Install/Update PDMShell PDMShell can be installed or updated from our official website or via the Microsoft Store. For the best experience, we highly recommend downloading PDMShell from our official website to ensure you always have the latest version. Note The Microsoft Store does not automatically update PDMShell. If you installed PDMShell via the Microsoft Store, you may need to uninstall it and reinstall the latest version manually. Installation Methods 1. From Our Website (Recommended) Visit our official website to download the latest version of PDMShell: ⬇️ DOWNLOAD PDMShell LATEST VERSION If Safe Browsing is turned off in your browser (e.g., Chrome), the installer might be flagged as unverified. Simply click on Download Anyway or Keep to proceed with the download. After downloading, double-click the installer and follow the on-screen instructions to complete the installation. Note: You may need administrative privileges to install PDMShell. 2. From the Microsoft Store Open the Microsoft Store on your Windows device. Search for PDMShell in the search bar. Select the PDMShell app from the search results. Click Get or Install to begin the installation process. Wait for the installation to complete, and then launch PDMShell from the Start menu. Notes Administrative Privileges: Depending on your system settings, you may need admin privileges to install PDMShell, especially if installing from the official website. Updates: The website always contains the latest version of PDMShell. If you installed PDMShell via the Microsoft Store, you may need to manually uninstall and reinstall to get the latest updates. System Requirements To ensure PDMShell runs smoothly, your system must meet the following requirements: Operating System: Windows 10/11 SOLIDWORKS PDM Professional: Version 2014 or newer SOLIDWORKS 3D: Version 2017 or newer (for commands that use SOLIDWORKS) Support For further assistance, visit our Support Page or contact us at amen@bluebyte.biz."
  },
  "src/index.html": {
    "href": "src/index.html",
    "title": "PDMShell | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "body { background-color: #121212; color: #e0e0e0; font-family: Arial, sans-serif; }git h2 { color: #bb86fc; } p { color: #e0e0e0; } a { color: #bb86fc; text-decoration: none; } a:hover { text-decoration: underline; } .container { display: flex; flex-wrap: wrap; justify-content: center; margin: 20px 0; } .card { background-color: #1f1f1f; border: 1px solid #333; border-radius: 8px; margin: 10px; padding: 20px; width: 300px; text-align: center; } .card img { max-width: 100%; height: auto; border-radius: 8px; } .video-container { background-color: black; width: 100%; padding: 10px; margin: auto; text-align: center; } .video-container video { width: 100%; max-width: 800px; height: auto; border-radius: 8px; } .download-button { display: inline-block; background-color: #bb86fc; color: #ffffff; font-weight: bold; text-transform: uppercase; padding: 10px 20px; border-radius: 8px; margin: 20px 0; text-align: center; } .download-button:hover { background-color: #9b6fcf; } body { background-color: #1a1a1a; margin: 0; font-family: 'Open Sans', sans-serif; } .header-container { display: flex; padding: 10px; margin: auto; align-items: center; gap: 20px; flex-wrap: wrap; } .header-text { color: white; text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.3); font-weight: 600; font-size: 32px; margin: auto; text-transform: uppercase; letter-spacing: 1px; line-height: 1.4; max-width: 600px; } @media (max-width: 768px) { .header-container { flex-direction: column; align-items: flex-start; } } PowerShell-Like Features For SOLIDWORKS PDM Professional This video autoplays silently so you can watch without sound. Unmute if you'd like to hear it. PDMShell, a command-line interpreter designed to streamline and automate tasks within SOLIDWORKS PDM Professional. We also provide helpful articles on PDM best practices and tooling. Before submitting a support ticket, we highly recommend reviewing the documentation and troubleshooting guides available on this site. Click on PDM Commands to get started. DOWNLOAD PDMSHELL DIRECTLY PDMShell is free. PDMShell is free to use and allows you to test all commands with some limits without committing to a license. To buy a license, please visit the Blue Byte Systems online shop. Read details below. Find Any File Archive Path Learn how to manage archive paths effectively in PDMShell. Edit Datacards like a Boss Change datacard values for one of many files using the SetVar command. Change Directory Understand how to use the CD command to navigate directories in PDMShell. Checkout, 1, 10 or 1000 Files In One Line Discover how to use the CHECKOUT command to check out files from the vault. List Directory Content Explore the DIR command to list files and folders in the current directory. Concurrent PDM Sessions Learn how to use the LOGIN command to authenticate with the vault. Options Understand the various options available in PDMShell to customize your experience. Power Search Capabilitiy Learn how to use the Search command to find files and folders efficiently. Need more power? Choose Premium. Upgrade to the Premium Version of PDMShell to unlock advanced features that take your productivity to the next level. With the Premium Version, you can: Call PDMShell directly from other applications, enabling seamless integration into your workflows. Run PDMShell as a workflow transition action, automating complex tasks and saving time. Process unlimited number of files. Free version caps at items per search. Take advantage of these powerful features to streamline your PDM operations and enhance your team's efficiency. Buy the Premium Version Now Need more information or want to discuss how PDMShell can fit into your workflow? Schedule a call with us today: Schedule a Call Contact Us For more information or to get in touch with our support team, please refer to the Contact Us page."
  },
  "src/introduction.html": {
    "href": "src/introduction.html",
    "title": "Getting Started | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "Introduction to PDMShell Welcome to PDMShell, the command-line interpreter designed specifically for SOLIDWORKS PDM Professional. PDMShell empowers engineers and IT professionals with a powerful, flexible, and efficient tool for automating and streamlining tasks within the SOLIDWORKS PDM environment. Using the Help System PDMShell provides a comprehensive help system and detailed command documentation to guide you through its features. Here's how to get started: To view a list of all available commands, type: help To get detailed information about a specific command, type: help -command <command> For example: help -command cd Understanding the Command Documentation Structure Each command page in PDMShell documentation is organized into the following sections: DESCRIPTION: A brief explanation of what the command does. SYNTAX: The syntax for using the command, including required and optional parameters. PARAMETERS: A detailed explanation of each parameter, including whether it is required or optional. EXAMPLES: Practical examples of how to use the command. REMARKS: Additional notes, tips, or special considerations for using the command. TUTORIAL: A short video tutorial demonstrating the command in action (if available). Example Command Documentation Here’s an example of how a command is documented: CD Command Documentation DESCRIPTION: Changes the current PDM directory. SYNTAX: cd [-directory|-id] PARAMETERS: directory: The directory to switch to. The directory parameter can be a relative or absolute path in PDM. id: ID of the folder to navigate to. EXAMPLES: cd -directory 'C:\\Vault\\NewFolder' # Navigates to NewFolder cd -id 755 # Navigates to the folder with ID 755 REMARKS: Use cd.. to navigate to the parent folder or cd\\ to navigate to the root of the vault. If you just created a new folder and want to cd to it using autocomplete, use the dir command with the -refresh parameter to reload the session. directory is the default parameter, so you don’t need to specify it if it’s the only parameter in your command. TUTORIAL: By following this structure, you can quickly learn how to use any command in PDMShell and integrate it into your workflows. \uD83D\uDCDE Getting Support If you need assistance or have any questions, we're here to help! Contact Us: Click the button below to reach out to our support team: Get Support Thank you for choosing PDMShell! We’re excited to help you streamline your PDM workflows and unlock new levels of productivity."
  },
  "src/parameter_short_format.html": {
    "href": "src/parameter_short_format.html",
    "title": "Short Format for Parameters | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "Short Format for Parameters in PDMShell Overview PDMShell supports short formats for many of its parameters to make commands more concise and easier to use. These short formats are defined for specific parameters and can be used as an alternative to their full names. Below is a comprehensive list of parameters and their corresponding short formats. List of Parameters and Their Short Formats Parameter Short Format Description username u Specifies the username for authentication. password p Specifies the password for authentication. vaultName v Specifies the name of the PDM vault. filePath f Specifies the file path to operate on. command c Specifies the command name. search s Specifies the search query. Can use % for wildcard. directory d Specifies the directory to operate on. Wrap in \"\" if there are spaces. columns cols Specifies the columns to include in the output. Wrap in \"\" if there are spaces. Seperate multiple by comma. csv csv Specifies the CSV file to use. You need to include extension. sort sort Specifies the sorting order by column name. Used only in dir command. programName prog Specifies the program name. configNames configs Specifies the configuration names. Wrap in \"\" if there are spaces. Seperate multiple by comma. value val Specifies the value to set. Wrap in \"\" if there are spaces. version ver Specifies the version of the file or software. variableName var Specifies the name of the variable. clearToggle cls Toggles clearing the variable. Used only setvar command. comment cmt Specifies a comment during check-in. Wrap in \"\" if there are spaces. checkinoptions ciopt Specifies options for check-in operations. oldVersion oversion Specifies the old version of the file. refresh refresh Refreshes the current session autocomplete list. Use with dir. checkinouttoggle checkinouttoggle Toggles check-in or check-out operations. process process Specifies the process to execute. list list Lists items based on the specified criteria. batch batch Specifies batch operations. id id Specifies the ID of the file or folder. mkvarattributes mkvarattributes Specifies attributes for variable creation. TransitionID trid Specifies the transition ID. source source Specifies the source file or folder. destory dest Specifies the destination file or folder. recursive recursie Toggles recursive operations. extensions ext Specifies file extensions to include. ignoreexisting ignoreex Ignores existing files or folders. date date Specifies the date. updaterefs updaterefs Updates references for files or folders. includesubfolders includesubfolders Includes subfolders in the operation. includeproperties includeproperties Includes properties in the operation. toolboxflag toolboxflag Toggles the toolbox flag. evaluatealias evaluatealias Evaluates aliases for dynamic placeholders. stringformat stringformat Specifies the string format. taskName taskName Specifies the name of the task. suffix suffix Specifies a suffix to append. prefix prefix Specifies a prefix to prepend. includedrawings includedrawings Includes drawings in the operation. latest latest Toggles the use of the latest version. Usage Example Here’s an example of using short formats in a command: Full Format setvar -filePath \"C:\\Vault\\File.sldprt\" -variableName \"VariableName\" -value \"NewValue\""
  },
  "src/runswmacro.html": {
    "href": "src/runswmacro.html",
    "title": "RUNSWMACRO Command Documentation | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "RUNSWMACRO Command Documentation DESCRIPTION: The RunSWMacro command allows you to execute a SOLIDWORKS macro on a specific file or on multiple files found via search in the PDM vault. This is useful for automating repetitive tasks or applying custom logic to many files. SYNTAX: runswmacro -filePath -search -recursive PARAMETERS: The command requires the following parameters: filePath: Path to the SOLIDWORKS macro file (.swp or .swb). This is required. search: (Optional) Search query to find files to run the macro on. recursive: (Optional) If set, search will include subfolders. REMARKS: Warning Please read the remarks below to properly call your macro. The macro procedure name must be called main. The macro module name must be called the file name of the macro appended by 1. Example: If the macro called print.swp the module name must be called print1. EXAMPLE: # run batch export macro on all part in the current directory runswmacro -filePath \"Macros/BatchExport.swp\" -search \"%.sldprt\""
  },
  "src/scripting.html": {
    "href": "src/scripting.html",
    "title": "Scripting | PDMShell | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "Scripting in PDMShell Overview PDMShell supports scripting to automate tasks and streamline workflows. Scripts use the .pdmshell file extension and are plain text files, making them easy to create and edit using any text editor, such as Notepad. Creating a Script A PDMShell script is a sequence of PDMShell commands written in a plain text file. Each command is executed in the order it appears in the script. Example Script Below is an example of a .pdmshell script: # filepath: example.pdmshell # This script automates exporting and adding files to the vault. # Navigate to the working directory cd \"\\api\\sandbox\\fidget spinner\" # Create a new export folder with a dynamic name using the current folder mkdir \"$name-export-$date\" # Export all SolidWorks part files to the new folder as STEP files export -search %.sldprt -directory \"$name-export-$date\" -extensions stp -name $namewithoutextension-$yyyy-$mm-$dd # Change to the newly created export folder cd \"$name-export-$date\" # Add the exported files to the vault as stp files are NOT automatically added addtovault -source \" \" # Check in all files in the current folder checkin -search % # Open the folder in File Explorer start . Script Annotations cd \"\\api\\sandbox\\fidget spinner\": Changes the current working directory to the specified path. mkdir \"$name-export-$date\": Creates a new folder with a dynamic name based on the current date and the folder name. export: Exports all .sldprt files in the current directory to the newly created folder as .stp files, appending the current date to the file names. cd \"$name-export-$date\": Changes the working directory to the newly created export folder. addtovault: Adds the exported files to the vault. checkin: Checks in all files in the current folder to the vault. start .: Opens the current folder in File Explorer. Comments Lines that start with # are ignored. Executing a Script There are two ways to execute a .pdmshell script: 1. Using pdmcli.exe You can execute a script using the pdmcli.exe command-line tool. Provide the script file as the first argument, wrapped in quotes if the file path contains spaces. Example Command pdmcli.exe \"C:\\Scripts\\example.pdmshell\" The pdmcli.exe tool can be found in the installation folder under Program Files (x86)\\BLUE BYTE SYSTEMS INC. 2. Using the runscript Command You can also execute scripts directly from the PDMShell console using the runscript command. [Note] Example Command runscript -source \"C:\\Scripts\\example.pdmshell\" Note For more information about the runscript command, refer to the runscript documentation. Workflow Integration For users with the Premium Version of PDMShell, pdmcli.exe can be hooked into workflow transitions. This allows scripts to be executed automatically as part of a workflow, enabling seamless automation of complex processes. Remarks Scripts are a powerful way to automate repetitive tasks and enforce consistency in workflows. Since .pdmshell files are plain text, they can be created and edited using any text editor. Ensure the script file is saved with the .pdmshell extension for proper execution. Use comments (#) in scripts to document the purpose of each command for better readability. TUTORIAL: Let Blue Byte Systems Write Your Scripts If you need assistance creating scripts for your specific workflows, Blue Byte Systems offers professional scripting services. Their team of experts can design and implement custom .pdmshell scripts tailored to your requirements, ensuring optimal efficiency and accuracy. To learn more about this service, contact Blue Byte Systems directly through their support page."
  },
  "src/scriptsfromtransition.html": {
    "href": "src/scriptsfromtransition.html",
    "title": "Notes About Running PDMShell Scripts from Workflow Transitions | SOLIDWORKS PDM | Powershell like features for SOLIDWORKS PDM Professional",
    "summary": "Notes About Running PDMShell Scripts from Workflow Transitions When you want to run PDMShell scripts as part of a workflow transition in SOLIDWORKS PDM, you can configure the transition to execute scripts seamlessly. This allows you to automate complex tasks during transitions, such as updating variables, exporting files, or triggering external processes. Workflow Transition Configuration Action Type: Set the action type to Execute Command. Command: Specify the path to the PDMShell executable, which is pdmcli.exe. \"path_to_pdmcli.exe\" runscript \"pathToScript\" [additional parameters] The pathToScript must be wrapped in quotes (\"\") if it contains spaces. Additional parameters can be passed to the script as needed aslo wrapped in quotes (\"\"). Make to sure to check Wait until the started program terminates. Example: Workflow Transition Execute Command Configuration \"C:\\Program Files (x86)\\BLUE BYTE SYSTEMS INC\\PDMShell\\PDMCLI.exe\" runscript \"C:\\Scripts\\clearvariables.pdmshell\" \"FilePath\" Example Script In the PDMShell script (clearvariables.pdmshell), you can reference the parameters as follows: # Check the selected file out checkout -filePath \"$parameter1$\" # clear description variable setvar -filePath \"$parameter1$\" -variableName Description -Value \"\" # Save changes checkin -filePath \"$parameter1$\" -comment \"cleared description\" # cd to root folder cd\\ # cd to logs folder cd logs # save log dump clearvariables_$yyyy-$mm-$dd_$guid.txt # You must call quit at the end of the script quit Tutorial Tips for Running PDMShell Scripts from Workflow Transitions Test Your Scripts: Always test your PDMShell scripts independently before integrating them with workflow transitions. Use Quotes for Paths: Wrap paths and parameters in quotes (\"\") if they contain spaces to avoid errors."
  }
}