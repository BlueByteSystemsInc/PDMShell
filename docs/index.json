{
  "README.html": {
    "href": "README.html",
    "title": "Before You Clone | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "Before You Clone Some files here will hit GitHub‚Äôs 100 MB file size limit for individual files. Use Git LFS (Large File Storage)/ GitHub supports large files through Git LFS. How To Use Clone repo cd to repo folder type bin\\docfx.exe docfx.json --serve and press enter go to http://localhost:8080 in your browser to view Ctrl + C to end the webserver git add . git commit -m \"added docs\" git push Live site Commits will take roughly a few minutes to render on github pages. See live site here. Edits Make changes to the src folder. It contains the toc.yml (Table of Content) and the articles in markdown (.md files) Images Add images to the images folder and use <img src=\"../images/myimage.png\"/> to render them. Tool Use VSCode."
  },
  "index.html": {
    "href": "index.html",
    "title": "PDMShell | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "body { background-color: #121212; color: #e0e0e0; font-family: Arial, sans-serif; } h2 { color: #bb86fc; } p { color: #e0e0e0; } a { color: #bb86fc; text-decoration: none; } a:hover { text-decoration: underline; } .container { display: flex; flex-wrap: wrap; justify-content: center; margin: 20px 0; } .card { background-color: #1f1f1f; border: 1px solid #333; border-radius: 8px; margin: 10px; padding: 20px; width: 300px; text-align: center; } .card img { max-width: 100%; height: auto; border-radius: 8px; } .video-container { background-color: black; width: 100%; padding: 10px; margin: auto; text-align: center; } .video-container video { width: 100%; max-width: 800px; height: auto; border-radius: 8px; } .download-button { display: inline-block; background-color: #bb86fc; color: #ffffff; font-weight: bold; text-transform: uppercase; padding: 10px 20px; border-radius: 8px; margin: 20px 0; text-align: center; } .download-button:hover { background-color: #9b6fcf; } body { background-color: #1a1a1a; margin: 0; font-family: 'Open Sans', sans-serif; } .header-container { display: flex; padding: 10px; margin: auto; align-items: center; gap: 20px; flex-wrap: wrap; } .header-text { color: white; text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.3); font-weight: 600; font-size: 32px; margin: auto; text-transform: uppercase; letter-spacing: 1px; line-height: 1.4; max-width: 600px; } @media (max-width: 768px) { .header-container { flex-direction: column; align-items: flex-start; } } PowerShell-Like Features For SOLIDWORKS PDM Professional üëÇüîá This video autoplays silently so you can watch without sound. Unmute if you'd like to hear it. PDMShell, a command-line interpreter designed to streamline and automate tasks within SOLIDWORKS PDM Professional. We also provide helpful articles on PDM best practices and tooling. Before submitting a support ticket, we highly recommend reviewing the documentation and troubleshooting guides available on this site. Click on PDM Commands to get started. ‚¨áÔ∏è Download PDMShell Directly PDMShell is free. PDMShell is free to use and allows you to test all commands with some limits without committing to a license. To buy a license, please visit the Blue Byte Systems online shop. Read details below. Find Any File Archive Path Learn how to manage archive paths effectively in PDMShell. Edit Datacards like a Boss Change datacard values for one of many files using the SetVar command. Change Directory Understand how to use the CD command to navigate directories in PDMShell. Checkout, 1, 10 or 1000 Files In One Line Discover how to use the CHECKOUT command to check out files from the vault. List Directory Content Explore the DIR command to list files and folders in the current directory. Concurrent PDM Sessions Learn how to use the LOGIN command to authenticate with the vault. Options Understand the various options available in PDMShell to customize your experience. Power Search Capabilitiy Learn how to use the Search command to find files and folders efficiently. Need more power? Choose Premium. Upgrade to the Premium Version of PDMShell to unlock advanced features that take your productivity to the next level. With the Premium Version, you can: Call PDMShell directly from other applications, enabling seamless integration into your workflows. Run PDMShell as a workflow transition action, automating complex tasks and saving time. Process unlimited number of files. Free version caps at items per search. Take advantage of these powerful features to streamline your PDM operations and enhance your team's efficiency. Buy the Premium Version Now Need more information or want to discuss how PDMShell can fit into your workflow? Schedule a call with us today: Schedule a Call Contact Us For more information or to get in touch with our support team, please refer to the Contact Us page."
  },
  "src/CD.html": {
    "href": "src/CD.html",
    "title": "CD Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "CD Command Documentation DESCRIPTION: Changes the current PDM directory. SYNTAX: cd [-directory|id] PARAMETERS: -directory(or d): The directory to switch to. The directory parameter can be a relative or absolute path in PDM. -id: ID of the folder to navigate to. EXAMPLES: cd -directory 'C:\\Vault\\NewFolder' # Navigates its newFolder REMARKS: Please be aware of the following special ways to change directory: cd.. # Navigates to the parent folder cd\\ # Navigates to the root of the vault If the user just created a new folder and wants to cd to it using autocomplete, they need to use the dir command with the -refresh parameter to force the session to load the current files and sub-folders in the active directory. Using -refresh might affect the performance of the session if the current folder has too many files and sub-folders. directory is the default parameter. You do not need to specify it if it is the only parameter in your command. Example: cd api #navigates to the api folder cd -id 755 #navigates to the folder with id 755 VIDEO:"
  },
  "src/CHECKIN.html": {
    "href": "src/CHECKIN.html",
    "title": "CHECKIN Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "CHECKIN Command Documentation DESCRIPTION: Performs a check-in operation on a specified file or many files. SYNTAX: checkin [-s search] [-f filePath] [-cmt comment] [-ciopt Checkinoptions] PARAMETERS: -s search - The search operation to use. -f filePath - The file(s) to be checked in. This is the default parameter. -cmt comment - The comment to add to the check-in. -ciopt Checkinoptions - The check-in options to use. EXAMPLES: checkin -f \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. If combining Checkinoptions parameters, the user needs to add + between the values. Checkinoptions Parameter Values: Member Description EdmUnlock_FailOnRegenerationNeed Fail if the file needs to be regenerated in the CAD program. NOTE: Only files resaved in SOLIDWORKS 2009 or later can trigger this flag EdmUnlock_ForceUnlock Unlock the file even if it is not modified EdmUnlock_IgnoreCorruptFile Ignore files with file formats unrecognized by SOLIDWORKS PDM Professional; without this flag, SOLIDWORKS PDM Professional returns E_EDM_INVALID_FILE if it encounters a corrupt file or a file containing a newer format than SOLIDWORKS PDM Professional can handle EdmUnlock_IgnoreReferences Silently unlock parent files without their references EdmUnlock_IgnoreRefsNotLockedByCaller Ignore references not locked by caller EdmUnlock_IgnoreRefsOutsideVault Ignore references to files outside the vault EdmUnlock_KeepLocked Keep the file checked out after creating the new version in the archive EdmUnlock_OverwriteLatestVersion Do not create a new version; overwrite the last version of the file with new changes EdmUnlock_RemoveLocalCopy Remove the local copy of the file from the hard disk after the file has been checked in EdmUnlock_Simple Check in the file using default behavior"
  },
  "src/CHECKOUT.html": {
    "href": "src/CHECKOUT.html",
    "title": "CHECKOUT Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "CHECKOUT Command Documentation DESCRIPTION: Performs a check out operation on a specified file or many files. SYNTAX: checkout -search -recursive -filePath PARAMETERS: -search: Search keyword -filePath: The file(s) to be checked out. This is the default parameter -recursive: Recursively check out all files in the current directory. Use in combination with search EXAMPLES: checkout -filePath file1.sldprt REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. VIDEO:"
  },
  "src/CLEARCACHE.html": {
    "href": "src/CLEARCACHE.html",
    "title": "CLEARCACHE Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "CLEARCACHE Command Documentation DESCRIPTION: Clears the local cache of a folder or many files SYNTAX: clearcache [-d directory] [-s search] PARAMETERS: -d directory - The directory to clear the local cache of. -s search - Search query. EXAMPLES: The search parameter allows to search for files in the current directory and remove their local copies."
  },
  "src/CLS.html": {
    "href": "src/CLS.html",
    "title": "CLS Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "CLS Command Documentation DESCRIPTION: Clears the current session. SYNTAX: cls PARAMETERS: None EXAMPLES: cls"
  },
  "src/DESTROY.html": {
    "href": "src/DESTROY.html",
    "title": "DESTORY Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "DESTORY Command Documentation DESCRIPTION: Destroy the deleted files in a folder. SYNTAX: clearcache [-d directory] [-recursive] PARAMETERS: -d directory - The directory to destory. -recursive - Enables recursive search."
  },
  "src/DIR.html": {
    "href": "src/DIR.html",
    "title": "DIR Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "DIR Command Documentation DESCRIPTION: Displays a list of files and subdirectories in a directory. SYNTAX: dir -sort -columns -csv -refresh PARAMETERS: -sort: The column name to sort the list of files and folders with. -columns: The columns to display, separated by commas. These are PDM variables drawn from the @ tab. -csv: Export the directory listing to a CSV file. Must include the csv extension -refresh: Refreshes the session to load the current files and sub-folders in the active directory in the autocomplete list. -recursive: Lists all files and all folders in the current directory recursively. EXAMPLES: dir #\"C:\\Vault\\Documents\" dir -sort \"name\" -cols \"description,partnumber\" -csv \"output.csv\" -refresh REMARKS: Use the -refresh parameter to force the session to load the current files and sub-folders in the active directory. Do not use this when the current folder has many items. The CSV file will be checked into the current directory. VIDEO:"
  },
  "src/DUMP.html": {
    "href": "src/DUMP.html",
    "title": "DUMP Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "DUMP Command Documentation DESCRIPTION: Dumps all session text into a log file. SYNTAX: dump [-l logfile] PARAMETERS: -l logfile - The log file to dump session details into. EXAMPLES: dump -l \"sessionlog.txt\""
  },
  "src/EDITVARS.html": {
    "href": "src/EDITVARS.html",
    "title": "EDITVARS Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "EDITVARS Command Documentation DESCRIPTION: Shows the variable editor manager. SYNTAX: editvars PARAMETERS: None EXAMPLES: editvars PREVIEW:"
  },
  "src/FROGLEAP.html": {
    "href": "src/FROGLEAP.html",
    "title": "FROGLEAP Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "FROGLEAP Command Documentation DESCRIPTION: Frog leaps an old version as newest. SYNTAX: frogleap [-s search] [-f filePath] [-oldVersion oldVersion] PARAMETERS: -s search - The search operation to use. -f filePath - The file(s) to be frog leaped. This is the default parameter. -oldVersion oldVersion - The old version to leap. This is an integer. EXAMPLES: frogleap -f \"file1.sldprt\" -oldVersion 2 REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/GET.html": {
    "href": "src/GET.html",
    "title": "GET Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "GET Command Documentation DESCRIPTION: Retrieves a specified version of a file or files. SYNTAX: get [-s search] [-f filePath] [-ver version] PARAMETERS: -s search - The search operation to use. -f filePath - The file(s) to retrieve. This is the default parameter. -ver version - The version of the file to retrieve. EXAMPLES: get -f \"file1.sldprt\" -ver 2 REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/GETNAME.html": {
    "href": "src/GETNAME.html",
    "title": "GETNAME Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "GETNAME Command Documentation DESCRIPTION: Returns the name of an object (folder or file) from a PDM ID. SYNTAX: getname [-id object_id] PARAMETERS: -id object_id - The PDM ID of the object. EXAMPLES: getname -id 12345 PREVIEW:"
  },
  "src/GETVAR.html": {
    "href": "src/GETVAR.html",
    "title": "GETVAR Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "GETVAR Command Documentation DESCRIPTION: Gets the value of a variable for a specified file or folder. SYNTAX: getvar [-f filePath] [-var variableName] [-configs configNames] [-clear] [-ver version] PARAMETERS: -f filePath - The file or folder to get the variable from. -var variableName - The variable name to retrieve. -configs configNames - The configuration names to retrieve the variable from, separated by commas. -clear - Clears the variable value. -ver version - The version of the file to retrieve the variable from. EXAMPLES: getvar -f \"file1.sldprt\" -var \"CustomVar\" REMARKS: The configuration names should be separated by commas. The variable must be in the data card."
  },
  "src/GETVARFROMDB.html": {
    "href": "src/GETVARFROMDB.html",
    "title": "GETVARFROMDB Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "GETVARFROMDB Command Documentation DESCRIPTION: Gets the value of a variable for a specified file or folder directly from the database. SYNTAX: getvarfromdb [-f filePath] [-var variableName] [-configs configNames] PARAMETERS: -f filePath - The file or folder to get the variable from. -var variableName - The variable name to retrieve from the database. -configs configNames - The configuration names to retrieve the variable from, separated by commas. EXAMPLES: getvarfromdb -f \"file1.sldprt\" -var \"CustomVar\" REMARKS: The configuration names should be separated by commas."
  },
  "src/HELP.html": {
    "href": "src/HELP.html",
    "title": "HELP Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "HELP Command Documentation DESCRIPTION: Provides help about a command. SYNTAX: help [-command|-c] command_name PARAMETERS: -c command_name The specific command you need help with. EXAMPLES: help -c cd"
  },
  "src/HISTORY.html": {
    "href": "src/HISTORY.html",
    "title": "HISTORY Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "HISTORY Command Documentation DESCRIPTION: Prints the history of a file. SYNTAX: history [-s search] [-f filePath] PARAMETERS: -s search - The search operation to use. -f filePath - The file to get the history for. EXAMPLES: history -f \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. PREVIEW:"
  },
  "src/INBOX.html": {
    "href": "src/INBOX.html",
    "title": "INBOX Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "INBOX Command Documentation DESCRIPTION: Opens the PDM inbox and sends a message as the logged-in user. SYNTAX: inbox [-m message] PARAMETERS: -m message - The message to send. EXAMPLES: inbox -m 'File checked in successfully'"
  },
  "src/INFOVAR.html": {
    "href": "src/INFOVAR.html",
    "title": "INFOVAR Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "INFOVAR Command Documentation DESCRIPTION: Gets information about a variable. SYNTAX: infovar [-v variable_name] PARAMETERS: -v variable_name - The variable name to retrieve information for. EXAMPLES: infovar -v Description Preview"
  },
  "src/KILL.html": {
    "href": "src/KILL.html",
    "title": "KILL Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "KILL Command Documentation DESCRIPTION: Kills a process. SYNTAX: kill [-p process_name] PARAMETERS: -p process_name - The process to terminate (with extension) EXAMPLES: kill sldworks.exe REMARKS: This command uses taskkill from the command line. It requires PDM to be run as an administrator."
  },
  "src/LOGIN.html": {
    "href": "src/LOGIN.html",
    "title": "LOGIN Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "LOGIN Command Documentation DESCRIPTION: Authenticates a user to a specified vault. SYNTAX: login [-auto|-win -username -password|-external -username -password ] -vaultname PARAMETERS: Auto: Automatic authentication with current user. Displays login dialog box if not logged in. Win: Automatic Windows authentication with current user. Does not display login dialog box. External: Toggle ensures that a license is consumed. Username: Username. Password: Password. vaultName: Vault Name. EXAMPLES: login -username admin -password ******** -vaultName bluebyte #logs into the bluebyte vault with a username ans a password login -auto -vaultName bluebyte #logs into the blue byte vault using the existing PDM session REMARKS: You must have a local vault view before you can start using PDMShell. The external parameter allows an application that is not supplied and supported by SOLIDWORKS Corporation to: Log into SOLIDWORKS PDM Professional Log into a vault view VIDEO:"
  },
  "src/MKDIR.html": {
    "href": "src/MKDIR.html",
    "title": "MKDIR Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "MKDIR Command Documentation DESCRIPTION: Creates a new folder. SYNTAX: mkdir [-d directory] PARAMETERS: -d directory - The folder to create. EXAMPLES: mkdir -d \"NewFolder\" Remarks: To get the new folder to show up in the auto-complete, please use the command cd -refresh"
  },
  "src/MKVAR.html": {
    "href": "src/MKVAR.html",
    "title": "MKVAR Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "MKVAR Command Documentation DESCRIPTION: Creates a new variable. SYNTAX: mkvar [-n name] [-varType varType] [-mkvarflags mkvarflags] [-mkvarattributes mkvarattributes] PARAMETERS: -n name - The name of the variable to create. -varType varType - The type of the variable. -mkvarflags mkvarflags - The flags for the variable. -mkvarattributes mkvarattributes - The attributes for the variable. Seperated by # EXAMPLES: mkvar -n \"NewVariable\" -varType \"Text\" -mkvarflags \"ReadOnly\" -mkvarattributes \"Attribute1#Attribute2\" VAR TYPE VALUES: Description None Text Int Float Bool Date MKVAR FLAGS VALUES: Value Description Unique Values of the variable must be unique; only used for files, ignored for folders Mandatory Missing values are not permitted; only used for files, ignored for folders VerFreeUpdateAll Every version and every revision, regardless access, workflow states etc., are affected by the variable update VerFreeLatest Only the latest version is affected by the variable update"
  },
  "src/PRINT.html": {
    "href": "src/PRINT.html",
    "title": "PRINT Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "PRINT Command Documentation DESCRIPTION: Displays the biographical information about the specified file. SYNTAX: print [-filePath|-id] PARAMETERS: -filePath: The file to print biographical information for. EXAMPLES: print -filePath \"C:\\SOLIDWORKSPDM\\Bluebyte\\API\\Sandbox\\fidget spinner\\___108545.SLDPRT\" The print command will print an output like the following: File Name : ___108545.SLDPRT Local Path : C:\\SOLIDWORKSPDM\\Bluebyte\\API\\Sandbox\\fidget spinner\\___108545.SLDPRT Folder Path : \\API\\Sandbox\\fidget spinner File ID : 115310 Folder ID : 457 HEXID : 1C26E Archive Path : E\\0001C26E Checked out? : False State ID : 158 State Name : New State Current state : New State [Workflow: Vaulted] Current Ver : 7 Current Rev : Transitions : Return Engineering [193] From New State [158] To In Design [9]"
  },
  "src/QUIT.html": {
    "href": "src/QUIT.html",
    "title": "QUIT Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "QUIT Command Documentation DESCRIPTION: Quits the application. SYNTAX: quit PARAMETERS: None EXAMPLES: quit"
  },
  "src/REBOOT.html": {
    "href": "src/REBOOT.html",
    "title": "REBOOT Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "REBOOT Command Documentation DESCRIPTION: Hard PDM reboot. SYNTAX: reboot PARAMETERS: None EXAMPLES: reboot REMARKS: This command uses taskkill from the command prompt to kill explorer.exe and edmserver.exe then restart explorer.exe. It requires PDM to be run as an administrator."
  },
  "src/RENAME.html": {
    "href": "src/RENAME.html",
    "title": "RENAME Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "RENAME Command Documentation DESCRIPTION: Renames a specified file. SYNTAX: rename [-filePath filePath] [-val value] [-search search] PARAMETERS: -filePath filePath - The filerename. -val value - The new name for the file. -search search - The search operation to use. EXAMPLES: rename -filePath \"oldname.sldprt\" -val \"newname.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. VALUE EVALUATION: The value parameter gets evaluated by PDMShell. PDMShell allows you to use placeholders in the new name, which will be replaced with actual values from the file. This can be useful to dynamically generate new names based on file properties or other variables. The following placeholders are supported: $filename - The file name without extension. $id - The file ID. $revision - The current revision of the file. $date - The current date. $time - The current time. $version - The current version of the file. $extension - The file extension. Additionally, you can use variables enclosed in square brackets (e.g., [VariableName]) to include values from other variables. Example: If you use the value \"$filename_$date_$version\", it will be replaced with the file name, current date, and version, resulting in something like \"oldname_10-12-2023_3\"."
  },
  "src/RUNSCRIPT.html": {
    "href": "src/RUNSCRIPT.html",
    "title": "RUNSCRIPT Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "RUNSCRIPT Command Documentation DESCRIPTION: Runs a PDMShell script. SYNTAX: runscript [-filePath filePath] PARAMETERS: -filePath file path to the script file. EXAMPLES: runscript -source pdmshell.script In the example above the pdmshell.script exists in the current directory. REMARKS: Script file must be stored in PDM. Commands like cls and quit are not supported in scripting. A good way to start creating a script is the start notepad.exe command. Use it to create a new text file and copy the commands from the PDMShell session."
  },
  "src/SEARCH.html": {
    "href": "src/SEARCH.html",
    "title": "SEARCH Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "SEARCH Command Documentation DESCRIPTION: The search command allows users to search for files and folders in the current directory. It supports recursive searches, filtering, and output customization. SYNTAX: search -search -recursive -includesubfolders -csv -columns PARAMETERS: search: Search keyword. This supports SQL wildcard %. recursive: Searches through all subdirectories recursively. includesubfolders: Includes subfolders in the search results. csv: Outputs the search results in CSV format. columns: Specifies the columns to include in the output. EXAMPLES: Example 1: Basic Search search -search % # prints all the files in the current directory Performs a basic search in the current directory. Example 2: Recursive Search with Subfolders search -search -recursive -includesubfolders # prints all the files and folders in the current directory Searches all files and folders, including subdirectories. Example 3: Export Results to CSV search -search -csv -columns \"Description,PartNumber\" # Prints all the files in the current directory with their descriptions and part numbers Exports the search results to a CSV file with specified columns. NOTES: Ensure the current directory is set correctly before running the command. Use the -columns parameter to customize the output format. Data is pulled from @ for configuration-supported documents. VIDEO:"
  },
  "src/SETVAR.html": {
    "href": "src/SETVAR.html",
    "title": "SETVAR Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "SETVAR Command Documentation DESCRIPTION: Sets the value of a variable for a specified checked out file or many checked out files. SYNTAX: setvar [-filePath|-search] -variableName -value [-configNames] [-stringformat] PARAMETERS: -filePath: The file to set the variable for. -variableName: The variable to set. -value: The value to assign to the variable. -configNames: The configuration names to set the variable for, separated by commas. -search: The search operation to use. -stringformat: string format. See remarks section. EXAMPLES: setvar -filePath file1.sldprt -variableName Description -value $value -stringformat UpperCase # Upper case the current value. EVALUATION: The value parameter gets evaluated by PDMShell. This feature allows you to use placeholders in the new value, which will be replaced with actual values from the file or folder. This can be useful to dynamically generate new values based on file or folder properties or other variables. The following placeholders are supported: For Files: $value: Existing value of the variable. $name: The file name with extension. $nameWithoutExtension: The file name without extension. $username: The name of the logged-in user. $vaultName: The name of the vault. $yyyy: The current year. $mm: The current month (two digits). $hh: The current hour (two digits). $mi: The current minute (two digits). $ss: The current second (two digits). $id: The file ID. $revision: The current revision of the file (PDM revision, not the PDM variable). $date: The current date. $time: The current time in the current locale. $version: The current version of the file. $extension: The file extension. $fullyQualifiedName: The full local path of the file. $fullyQualifiedFolderName: The full local path of the folder containing the file. $folderName: The name of the folder containing the file. For Folders: $value: Existing value of the variable. $name: The folder name. $folderName: The name of the parent folder. $id: The folder ID. $fullyQualifiedName: The full local path of the folder. $username: The name of the logged-in user. $vaultName: The name of the vault. $yyyy: The current year. $mm: The current month (two digits). $hh: The current hour (two digits). $mi: The current minute (two digits). $ss: The current second (two digits). $date: The current date. $time: The current time in the current locale. Additionally, you can use variables enclosed in square brackets (e.g., [VariableName]) to include values from other variables. These variables are dynamically resolved based on the context of the file or folder. REMARKS The configNames parameter should be separated by commas. If omitted, PDMShell uses @ for configuration-supported documents. The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard. The stringformat parameter allows you to format the value of the variable using predefined string formatting options. The following formats are supported: UpperCase: Converts the entire string to uppercase. LowerCase: Converts the entire string to lowercase. CamelCase: Converts the string to camel case, where the first word is lowercase, and subsequent words are capitalized (e.g., exampleString). FirstLetterCase: Capitalizes the first letter of the string and converts the rest to lowercase (e.g., Example). VIDEO:"
  },
  "src/SETVARSFROMSOURCE.html": {
    "href": "src/SETVARSFROMSOURCE.html",
    "title": "SETVARSFROMSOURCE Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "SETVARSFROMSOURCE Command Documentation DESCRIPTION: Sets variables for multiple files using a CSV file as the source. SYNTAX: setvarsfromsource -source csvFilePath PARAMETERS: -source csvFilePath - The CSV file containing the file IDs and variable values. CSV FILE FORMAT: The CSV file should have the following format: FileID,Variable1,Variable2,... file1.sldprt,Value1,Value2,... file2.sldprt,Value1,Value2,... EXAMPLES: setvarsfromsource -source \"variables.csv\" REMARKS: The CSV file should have the first column as the file ID and the subsequent columns as the variable names. The best way to generate a source CSV is to use the dir command on a folder with the -csv parameter, like: dir -csv data.csv"
  },
  "src/START.html": {
    "href": "src/START.html",
    "title": "START Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "START Command Documentation DESCRIPTION: Starts a program or the administration tool. SYNTAX: start [-p program_name] PARAMETERS: -p program_name - The program to start. EXAMPLES: start -p 'C:\\Program Files\\MyProgram.exe' REMARKS: start admin starts the administration tool"
  },
  "src/UNDOCHECKOUT.html": {
    "href": "src/UNDOCHECKOUT.html",
    "title": "UNDOCHECKOUT Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "UNDOCHECKOUT Command Documentation DESCRIPTION: Undoes a checkout operation. SYNTAX: undocheckout [-f filePath | -s search] PARAMETERS: -f filePath - The file(s) to undo the checkout for. -search search - The search operation to use. EXAMPLES: undocheckout -f \"file1.sldprt\" REMARKS: The search parameter searches the current directory and does not drill down. The search query is a PDM one, so you can use % for wildcard."
  },
  "src/USERS.html": {
    "href": "src/USERS.html",
    "title": "USERS Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "USERS Command Documentation DESCRIPTION: Lists all the users in the active vault. SYNTAX: users PARAMETERS: EXAMPLES: users"
  },
  "src/VERSION.html": {
    "href": "src/VERSION.html",
    "title": "VERSION Command Documentation | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "VERSION Command Documentation DESCRIPTION: Lists versions of installed SOLIDWORKS. SYNTAX: version PARAMETERS: SOLIDWORKS - List versions of installed SOLIDWORKS EXAMPLES: version -solidworks"
  },
  "src/cdpdm.html": {
    "href": "src/cdpdm.html",
    "title": "Continuous Delivery | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "Continuous Delivery CDPDM is a PDM add-in by Blue Byte Systems Inc. that facilitates the deployment of PDM and task add-ins developed for you. The add-in communicates with our servers and allows the installation and uninstallation of all versions of your PDM add-ins. Advantages The advantages of using CDPDM are numerous: ‚úîÔ∏è No need to ask for or download CEX files. ‚úîÔ∏è Ability to switch between versions. ‚úîÔ∏è The conventional process of installing and updating add-ins is very tedious and time-consuming. Where to Find CDPDM If we have a developed a custom solution for you: CDPDM is provided in your project onboarding email. The email contains: Link to the CEX file. Link to this page with installation instructions. Link to your Customer Configuration File. If you have purchased a PDM product from us: Your Blue Byte Systems Inc account has all the information you need. You can access your account from this link here. From the Downloads tab, please download the archive file that contains CDPDM.cex and the Customer Configuration File. Note If you have purchased one of our PDM products and have had us develop a custom solution for you, please reach to us so we can generate a Customer Configuration File that lets you access all of your assets. How to Install Locate CDPDM.cex. In Windows 11, 10, and 7, internet downloads are blocked. Right-click on the CEX file, go to Properties, check Unblock, then click Apply and OK. Open the Administration tool. Log in to the vault. Please ensure you use a PDM user with Edit Add-Ins permission. In the Administration tool, click File > Open and browse to the CDPDM.cex file. Drag and drop the add-in from the CEX window onto the Add-ins node and wait for a few moments for CDPDM to be installed. Configuration Locate your Customer Configuration File. You can upload the Customer Configuration File via the Administration tool. Right-click on the add-in and click Upload Customer Configuration File... Browse to the Customer Configuration File. Note You can configure the settings of CDPDM by adding the credentials of the Customer Configuration File manually. Contact support for help. Updating Add-ins Right-click on CDPDM under Add-ins in the Administration tool and click Update Add-ins... This process may take a few moments depending on how many add-ins are in your vault. You will be prompted with a window like the following: You can: Install the selected add-in from the list. From the Version To Install dropdown, you can select which version to install and make sure to check the add-in. Uninstall the selected add-in from the vault (if it is installed). The installation process will ask you if you want to restart PDM. This may be beneficial to do after every upgrade, especially if you're validating a feature. Note Please allow for a few moments after you click Install/Update. The add-in will be downloaded unblocked and added to the vault. This operation includes suppressing some PDM dialog boxes."
  },
  "src/eula.html": {
    "href": "src/eula.html",
    "title": "PDMShell End User License Agreement | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "PDMShell End User License Agreement 1. Introduction This End User License Agreement (\"EULA\") is a legal agreement between you (\"Licensee\") and Blue Byte Systems Inc. (\"Licensor\"), governing your use of the PDMShell software product and any associated documentation (collectively, the \"Software\"). By installing, copying, automating (including automatic or unattended use), or otherwise using the Software, you agree to be bound by the terms of this EULA. If you do not agree, do not install, copy, automate, or otherwise use the Software. 2. License Grant Licensor grants Licensee a non-exclusive, non-transferable, non-sublicensable, limited right to use the Software on a single computer or device for Licensee‚Äôs own internal business purposes. Special Licensing Requirement: Data migration companies, SOLIDWORKS resellers, or third-party providers utilizing or incorporating PDMShell into their commercial services or products must purchase a special licensing model from Blue Byte Systems Inc. Use without acquiring such licensing is strictly prohibited. 3. Restrictions Licensee agrees not to, and shall not permit others to: Resell, distribute, or sublicense the Software to any third party. Modify, adapt, translate, or create derivative works of the Software. Reverse engineer, decompile, disassemble, or otherwise attempt to derive the source code of the Software. Rent, lease, lend, or otherwise transfer the Software to any third party. Use the Software for any illegal purpose or in violation of applicable law. 4. Intellectual Property The Software and all related intellectual property rights, including copyrights, patents, trademarks, and trade secrets, are owned by Licensor or its licensors. This EULA does not grant Licensee any ownership rights in the Software. 5. Termination This EULA shall automatically terminate upon Licensee‚Äôs breach of any of its terms. Licensor may also terminate this EULA at any time upon written notice to Licensee. Upon termination, Licensee shall cease all use of the Software and delete all copies of the Software from its systems. 6. Disclaimer of Warranty THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. LICENSOR DOES NOT WARRANT THAT THE SOFTWARE WILL BE ERROR-FREE OR THAT IT WILL MEET LICENSEE‚ÄôS REQUIREMENTS. 7. Limitation of Liability IN NO EVENT SHALL LICENSOR BE LIABLE FOR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION, DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR PUNITIVE DAMAGES, ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 8. Changes to Terms Licensor reserves the right, in its sole discretion, to modify or update this EULA at any time without prior notice. Continued use of the Software constitutes acceptance of the modified or updated terms. 9. Governing Law This EULA shall be governed by and construed in accordance with the laws of British Columbia, Canada, without regard to its conflict of law provisions. 10. Entire Agreement This EULA constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior or contemporaneous communications, representations, and agreements, whether oral or written. 11. Severability If any provision of this EULA is held to be invalid or unenforceable, such provision shall be struck, and the remaining provisions shall remain in full force and effect. 12. Contact Information For any questions regarding this EULA, please contact: Blue Byte Systems Inc. Email: amen@bluebyte.biz"
  },
  "src/introduction.html": {
    "href": "src/introduction.html",
    "title": "Introduction to PDMShell | Powershell like features for SOLIDWORKS PDM Professional",
    "keywords": "Introduction to PDMShell Welcome to PDMShell, the command-line interpreter designed specifically for SOLIDWORKS PDM Professional. PDMShell empowers engineers and IT professionals with a powerful, flexible, and efficient tool for automating and streamlining tasks within the SOLIDWORKS PDM environment. By integrating command-line functionality, PDMShell enables users to perform routine PDM operations quickly, efficiently, and with greater control over their PDM data management processes. What is PDMShell? PDMShell is a comprehensive command-line interface (CLI) for SOLIDWORKS PDM Professional that simplifies file management, automation, and configuration tasks. It offers an extensive set of commands that can be used for common operations such as: File check-ins and check-outs Variable management User authentication Workflow automation And much more! With PDMShell, users can interact with the PDM system without needing to open the SOLIDWORKS PDM client interface, making it an ideal tool for: Batch processing Automation System integration üí° Why Use the Command Line Instead of File Explorer? Working with the command line offers several advantages over traditional file explorer interfaces: Speed: Perform bulk operations (e.g., renaming, moving, or deleting files) much faster than using a graphical interface. Automation: Automate repetitive tasks with scripts, saving time and reducing human error. Precision: Execute commands with exact parameters, ensuring consistent results. Integration: Seamlessly integrate with other tools, scripts, or workflows for enhanced productivity. For example, instead of manually navigating through folders in File Explorer to check out multiple files, you can use a single PDMShell command to check out all files in a specific folder or matching a pattern. Here are some practical scenarios where PDMShell shines: File Check-ins and Check-outs: Manage file versions by checking files in and out of the PDM vault directly from the command line, enabling efficient collaboration and version control. Variable Management: Update and manage custom properties or metadata (e.g., part numbers, descriptions, revision levels) for multiple files in bulk. Workflow Automation: Automate state transitions, approvals, and notifications to streamline processes like design reviews or release approvals. Advanced Search: Locate files or folders quickly using powerful search filters, such as file names, metadata, or workflow states. Folder Management: Create, rename, move, or delete folders in the PDM vault directly from the command line. File Renaming: Perform bulk renaming of files based on patterns or rules, saving time and ensuring consistency. File Moving and Copying: Move or copy files between folders or vaults efficiently, even in bulk operations. Version Management: Access and manage file versions, including retrieving older versions or promoting specific versions to the latest. Batch Processing: Execute operations like setting variables, checking in/out files, or renaming across multiple files or folders in one command. Integration with Scripts: Combine PDMShell commands with external scripts or tools to create custom workflows tailored to your business needs. Audit and Reporting: Generate reports on file activities, workflow states, or user actions for auditing and tracking purposes. File Deletion and Cleanup: Automate the deletion of obsolete or unused files to maintain a clean and organized PDM vault. Tip Performance Tip: If you have a large vault with folder content exceeding 500+ items, consider disabling IntelliSense to avoid performance issues. üìû Getting Support If you need assistance or have any questions, we're here to help! Contact Us: Click the button below to reach out to our support team: Get Support Thank you for choosing PDMShell! We‚Äôre excited to help you streamline your PDM workflows and unlock new levels of productivity."
  }
}